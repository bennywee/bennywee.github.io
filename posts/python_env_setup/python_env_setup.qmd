---
title: "Introduction to Python Environments"
author: "Benjamin Wee"
engine: knitr
date: "2023/05/15"
categories:
  - Python
format:
  html:
    toc: true
---

This post was promised to some friendly folk in the R community who were interested in using python. It is a conceptual introduction and a basic guide to how to set up python in a way that avoids common pain points and traps which I fell into when I first started. 

For R users, setting up python can be extremely confusing. The typical setup for R is to download R and Rstudio and away we go. When googling how to set up python as an R user (or someone who wasn't formally trained in software engineering or computer science), we are returned with multiple tools and tutorials with no obvious place to start. 

The first trap I fell into was installing the latest version of python and jupyterlabs then downloading packages freely for all my projects (similar to how we would `install.packages()` for any R package we needed). However, I learned very quickly that this would cause problems when different package versions or python versions were required across projects, leading me into [dependency hell](https://en.wikipedia.org/wiki/Dependency_hell).

# What are virtual environments?
A virtual environment is a project specific python environment with its own python version and libraries. It is isolated from other python environments as well as the system python so that each project can have their own set of dependencies that do not conflict with each other. 

We want to create _separate_ virtual environments for each of our projects so that we can avoid dependency hell. There are many tools for creating virtual environments - conda, poetry, venv, etc (as well as [renv](https://rstudio.github.io/renv/articles/renv.html) for R). For now, I will demonstrate how to use [venv](https://docs.python.org/3/library/venv.html) since this is native to python and avoids installing additional tools that are not needed to get started (other approaches are listed in the appendix).

# Setting up virtual environments using venv

## Prerequisites
Setting up and using python requires us to get comfortable with the command line. This tutorial is biased towards MacOS. While the principles of what to do are the same, the tools and commands may be different on other operating systems (commands for windows can be found in the [venv documentation](https://docs.python.org/3/library/venv.html)). So be prepared to do some work in your terminal. 

The following walkthrough assumes you have a single version of python3 installed on your machine. Typically when starting a new project, we want to do these steps in order:

1) Create a project repo
2) Pick a python version using pyenv (optional but recommended)
3) Create virtual environment 
4) Activate virtual environment 
5) Install packages

Step 2. isn't strictly required if you just want to get an idea of the basics - so I talk about setting this up in the appendix. However, if you end up needing multiple versions of python3 I highly recommend using `pyenv` to manage multiple python versions. If not feel free to ignore it for now. 

## Virtual environments with venv
<!-- Next we will create a virtual environment for our project. This ensures all our package installations and dependencies will be defined within the context of this project and be isolated from other repos . You may have done this with renv before. The setup is different but principles remain the same. -->

First, create and change into the project directory:

```{bash}
#| eval: false
mkdir py_project
cd py_project
```

Then use python to create your virtual environment. After running this command you will see a folder called `proj_env`, which is where all your dependnecies will live. 

```{bash}
#| eval: false
# Create virtual env, call it proj_env (or .proj_env if you want it hidden)
python3 -m venv proj_env
```

Activate your virtual env (if this works you should see the name of your virtual env directory on the left hand side of your terminal prompt)

```{bash}
#| eval: false
source proj_env/bin/activate
```

> (proj_env) benjaminwee@Benjamins-MacBook-Pro py_project %

Now you can pip install packages for your project. A standard way to do this is to list out the packages you want installed in a `requirements.txt` file and to install them all at once (otherwise you can do it individually using `pip install <package_name>`. You can also set the specific package version as I have done for `matplotlib` which is something I recommend.

```{bash}
#| eval: false
echo "numpy" >> requirements.txt
echo "pandas" > requirements.txt
echo "matplotlib==3.7.0" > requirements.txt

pip install -r requirements.txt
```

And that's it! As long as your virtual environment is activated, pip install will install packages into `proj_env` and will not conflict with other python environments. If you want to exit your virtual environment then run:

```{bash}
#| eval: false
deactivate
```

<!-- 
## Why not conda, poetry or some other tool?
I like venv as its native to python and it gives you everything you need out of the box without any additional setup/installations (which can sometimes lead to bloating). For people new to this workflow it's the one I recommend and the one I used for a while. -->

<!-- # Conclusion
Phew! That was a lot of information. Unfortunately setting up python up with good hygiene to minimise pain isn't as simple as installing R and Rstudio and away you go. However it is good to get comfortable with setting projects up in this way so you understand how to avoid pain points in the future.

Please reach out if you have any questions! :slightly_smiling_face: I will do another post on IDEs. But this is more up to personal preference, the TL:DR for this is there are a handful of popular IDEs for python like jupyterlab, pycharm, vscode. I like VScode for both R and Python. I will give a quick run through on how to set this up in a separate post. -->

# Appendix A: Managing python versions with pyenv
For python version management I use [pyenv](https://github.com/pyenv/pyenv) (there is also [pyenv for windows](https://github.com/pyenv-win/pyenv-win) but I haven't tried it before). pyenv allows you to download/manage multiple python versions across projects. There is a bit of setup involved but it is worth it if you plan to use different python versions (and even if you don't, you will probably have a package which relies on a specific python version which causes problems).

I would go straight to the installation step and install via homebrew (a package manager for your mac, happy to answer questions if this is confusing) and set up the shell environment. Once this is done, it is easy to install different python versions and set them for different project repos.

```{bash}
#| eval: false
# Install python version 3.10.4 and 3.10
pyenv install 3.10.4
pyenv install 3.10

# Check what python versions are installed on your system
pyenv versions

# Set global python version - this will be the default python version outside of any project repo
pyenv global 3.10

# Set a python version for a new project
cd py_project
pyenv local 3.10.4 # Set python version to 3.10.4 for this "local" repo
pyenv versions # check the correct python is set for the project
python # last check to make sure the correct python is being used for your project
```

Then we can follow the same commands to create a virtual environment using this specific python version

```{bash}
#| eval: false
python -m venv proj_env
source proj_env/bin/activate

echo "numpy" >> requirements.txt
echo "pandas" > requirements.txt
echo "matplotlib==3.7.0" > requirements.txt

pip install -r requirements.txt
```


# Appendix B: Different ways of setting up a python project
There are 3 setups I typically do for python. I walked through the first one above, but I'm happy to go through the others on request.

<!-- Note: this setup is biased towards MacOS. So while the principles of what to do are the same, the tools may be different on other operating systems. -->

**Approaches to setting up python:**

1) Basic environment setup - pyenv + venv

2) poetry - requires extra tool, but it does dependency management between packages really well

3) Docker - it's great, but may take some time to setup if you're new.

<!-- 
## Basic environment setup
Python has two main areas which causes headaches:

Multiple versions of python
Conflicting package versions and dependencies 

This happens because we may need different python/package versions for different projects. Headaches occur when we don't take care to isolate projects and dependencies. To deal with this, we will follow something similar to a workflow that uses R projects and renv. I.e isolate each project to have their own specific python version + packages.
 -->

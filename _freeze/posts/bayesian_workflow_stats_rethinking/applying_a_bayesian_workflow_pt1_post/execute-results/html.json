{
  "hash": "853d15fb6ba35c944e3d95cf3943b7aa",
  "result": {
    "markdown": "---\ntitle: \"Applying a bayesian workflow: lessons from Statistical Rethinking (I)\"\nauthor: \"Benjamin Wee\"\ndate: \"2020/11/21\"\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n---\n\n\nI spent the last few years studying Bayesian statistics in my spare time. Most recently, I completed Richard McElreath's [Statistical Rethinking](https://xcelab.net/rm/statistical-rethinking/) - including his 2017 lecture series and problem sets. It is rightfully one of the most popular entry level texts in bayesian statistics. I could not recommend it more highly. \n\nWhile I've gained a lot from doing problem sets and discussing course material with other people, nothing beats testing your knowledge and challenging imposter syndrome by attempting a modelling problem on your own.\n\nSo I decided to apply what I've learned so far on the Kaggle dataset: [House Prices: Advanced Regression Techniques](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/overview). The goal is to practise what I've learned in my self study journey and hopefully demonstrate some of the best practices advocated by those in the applied statistics community. This writeup was completed in R and Python (you'll get to choose below) and Stan* for modelling. \n\n*[Stan](https://mc-stan.org/)  is a probabilistic programming language that can flexibly estimate a wide range of probabilistic and bayesian models. It uses state of the art algorithms such as Hamiltonian Monte Carlo (HMC) which allows efficient sampling of models in high dimensions without the need for conjugate priors. Stan is used across academia and industry and notably in facebook's open source forecasting tool, [prophet](https://facebook.github.io/prophet/). \n\n## Thinking about workflow\n\nA recurring theme in applied statistics is the importance of workflow. This topic wasn't really covered explicitly in my econometrics/stats classes which put more emphasis on tools and derivations for predictive or causal inference. At best, components of workflow were explored in some research seminars.\n\nA good workflow supports quality model building. It forces us to think critically about decision making in data analysis which helps us evaluate our assumptions and identify errors. That isn't to say there is a gold standard of how all data analysis should be conducted. Rather, following a robust methodology guides modelling decisions and helps diagnose problems.  This becomes more important when adding complexity into models where it is harder to pinpoint where problems lie. \n\nDevelopments around workflow are a current topic of research. The most recent paper came out on November 2nd titled [Bayesian Workflow](https://arxiv.org/abs/2011.01808) which has many contributions from prominent members in the statistics community. This writeup was prepared before I had a chance to read the paper, but I hope it covers some of the principles and recommendations. And if not, like statistical models, the way I do data analysis will iterate and improve. \n\n> \"Practical Bayesian data analysis, like all data analysis, is an iterative process of model building, inference, model checking and evaluation, and model expansion\" - [Visualisation Bayesian Workflow - Gabry, Simpson, Vehtari, Betancourt, Gelman (2019)](https://arxiv.org/abs/1709.01449)\n\nThe proposed workflow I adopted was originally inspired from [blog posts](https://khakieconomics.github.io/2016/08/29/What-is-a-modern-statistical-workflow.html) by Jim Savage a few years ago and more recently, Monica Alexander's [example](https://www.monicaalexander.com/posts/2020-28-02-bayes_viz/) of visualisation in an end-to-end bayesian analysis. I've included a full list of resources which helped me at the end of this post. The steps in bold will be discussed below while an application using the full workflow will be in an upcoming writeup. \n\n### **Steps in proposed workflow**\n\n1)  **Exploratory data analysis and data transformation**\n\n2)  **Write out full probability model**\n\n3)  **Prior predictive checks - simulate data from the implied generative model**\n\n4)  **Fit model on fake data - can we recover the known parameters?**\n\n5)  **Estimate model on real data**\n\n6) Check whether MCMC sampler ran efficiently and model convergence\n\n7) **Posterior predictive check to evaluate model fit**\n\n8) Model selection using cross validation and information criteria\n\n9) _Optional:_ Evaluate model performance on test or out of sample dataset (not strictly necessary if the modelling task is not a predictive problem)\n\n# Predicting housing prices\n\n## Pick your language\n\n::: {.panel-tabset}\n\n## Python\n\n### 1) Exploratory data analysis and data transformation\n\nThe full dataset for this competition contains 79 features to predict the target variable `SalesPrice`. For this exercise I will focus on two variables: `Neighbourhood` (categorical: physical locations within Ames city limits) and `LotArea` (positive real: lot size in square feet). I chose these variables as they are consistent with my understanding of how housing prices vary in relation to their location and property size.\n\nAside: The model and feature selection in this example are deliberately simple. The goal is to motivate workflow, diagnostics and to interrogate assumptions, so I only used two variables to make it easier to follow. My [repo](https://github.com/bennywee/house_prices_kaggle) contains examples of other models and additional features.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pystan\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport arviz as az\nimport math\n\naz.style.use('arviz-darkgrid')\n\ndf = pd.read_csv('data/train.csv').loc[:, ['SalePrice', 'LotArea', 'Neighborhood']]\n\n# Log transform\ndf['log_sales_price'] = np.log(df['SalePrice'])\ndf['log_lot_area'] = np.log(df['LotArea'])\n\n# Create numerical categories (add 1 due to zero indexing)\ndf['neighbourhood'] = df['Neighborhood'].astype('category').cat.codes+1\n\ndf.head().style\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_e3be0\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_e3be0_level0_col0\" class=\"col_heading level0 col0\" >SalePrice</th>\n      <th id=\"T_e3be0_level0_col1\" class=\"col_heading level0 col1\" >LotArea</th>\n      <th id=\"T_e3be0_level0_col2\" class=\"col_heading level0 col2\" >Neighborhood</th>\n      <th id=\"T_e3be0_level0_col3\" class=\"col_heading level0 col3\" >log_sales_price</th>\n      <th id=\"T_e3be0_level0_col4\" class=\"col_heading level0 col4\" >log_lot_area</th>\n      <th id=\"T_e3be0_level0_col5\" class=\"col_heading level0 col5\" >neighbourhood</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_e3be0_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_e3be0_row0_col0\" class=\"data row0 col0\" >208500</td>\n      <td id=\"T_e3be0_row0_col1\" class=\"data row0 col1\" >8450</td>\n      <td id=\"T_e3be0_row0_col2\" class=\"data row0 col2\" >CollgCr</td>\n      <td id=\"T_e3be0_row0_col3\" class=\"data row0 col3\" >12.247694</td>\n      <td id=\"T_e3be0_row0_col4\" class=\"data row0 col4\" >9.041922</td>\n      <td id=\"T_e3be0_row0_col5\" class=\"data row0 col5\" >6</td>\n    </tr>\n    <tr>\n      <th id=\"T_e3be0_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_e3be0_row1_col0\" class=\"data row1 col0\" >181500</td>\n      <td id=\"T_e3be0_row1_col1\" class=\"data row1 col1\" >9600</td>\n      <td id=\"T_e3be0_row1_col2\" class=\"data row1 col2\" >Veenker</td>\n      <td id=\"T_e3be0_row1_col3\" class=\"data row1 col3\" >12.109011</td>\n      <td id=\"T_e3be0_row1_col4\" class=\"data row1 col4\" >9.169518</td>\n      <td id=\"T_e3be0_row1_col5\" class=\"data row1 col5\" >25</td>\n    </tr>\n    <tr>\n      <th id=\"T_e3be0_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_e3be0_row2_col0\" class=\"data row2 col0\" >223500</td>\n      <td id=\"T_e3be0_row2_col1\" class=\"data row2 col1\" >11250</td>\n      <td id=\"T_e3be0_row2_col2\" class=\"data row2 col2\" >CollgCr</td>\n      <td id=\"T_e3be0_row2_col3\" class=\"data row2 col3\" >12.317167</td>\n      <td id=\"T_e3be0_row2_col4\" class=\"data row2 col4\" >9.328123</td>\n      <td id=\"T_e3be0_row2_col5\" class=\"data row2 col5\" >6</td>\n    </tr>\n    <tr>\n      <th id=\"T_e3be0_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_e3be0_row3_col0\" class=\"data row3 col0\" >140000</td>\n      <td id=\"T_e3be0_row3_col1\" class=\"data row3 col1\" >9550</td>\n      <td id=\"T_e3be0_row3_col2\" class=\"data row3 col2\" >Crawfor</td>\n      <td id=\"T_e3be0_row3_col3\" class=\"data row3 col3\" >11.849398</td>\n      <td id=\"T_e3be0_row3_col4\" class=\"data row3 col4\" >9.164296</td>\n      <td id=\"T_e3be0_row3_col5\" class=\"data row3 col5\" >7</td>\n    </tr>\n    <tr>\n      <th id=\"T_e3be0_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_e3be0_row4_col0\" class=\"data row4 col0\" >250000</td>\n      <td id=\"T_e3be0_row4_col1\" class=\"data row4 col1\" >14260</td>\n      <td id=\"T_e3be0_row4_col2\" class=\"data row4 col2\" >NoRidge</td>\n      <td id=\"T_e3be0_row4_col3\" class=\"data row4 col3\" >12.429216</td>\n      <td id=\"T_e3be0_row4_col4\" class=\"data row4 col4\" >9.565214</td>\n      <td id=\"T_e3be0_row4_col5\" class=\"data row4 col5\" >16</td>\n    </tr>\n  </tbody>\n</table>\n\n```\n:::\n:::\n\n\nA scatter plot shows a positive correlation between `log(SalePrice)` and `log(LotArea)`. Fitting OLS on the logarithms of both variables assumes a linear relationship on the multiplicative scale. All else equal, property prices tend to be higher with larger lot sizes. However, this univariate linear model clearly underfits the data and there are almost surely unobserved confounding variables.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.lmplot(x='log_lot_area',y='log_sales_price',data=df,fit_reg=True, ci = False)\nplt.tight_layout()\n```\n:::\n\n\n<center>\n![](figures/2_pooling_scatter.svg)\n</center>\n\nA potential reason for underfitting may be some neighbourhoods have higher average prices than other neighbourhoods (which would result in different intercepts). Furthermore, the _association_ between housing prices and lot size may depend on different neighbourhoods as well (varying slopes). This variation could be driven by different zonings or housing densities within neighbourhoods that could impact the relationship between lot size and prices. Splitting the plot out by neighbourhood displays the heterogeneity in linear trends.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfacet_scatter = sns.lmplot(x=\"log_lot_area\", \n                           y=\"log_sales_price\", \n                           col=\"Neighborhood\",\n                           col_wrap = 5,\n                           data=df,\n                           ci = None, \n                           truncate=False,\n                           col_order = sorted(df['Neighborhood'].drop_duplicates()))\n\nfacet_scatter.set(xlim=(5, 15))\nfacet_scatter.set(ylim=(5, 15))\n```\n:::\n\n\n<center>\n![](figures/3_facet_scatter.svg)\n</center>\n\nWe can see variation in the slopes and intercepts as well as imbalanced sampling between neighbourhood clusters. This and other unobserved confounders probably contributed to some of the weak/negative gradients. The small sample sizes in some neighbourhoods will be prone to overfitting and will give noisy estimates which will require regularisation.  \n\n### 2) Write out full probability model\n\n3 basic linear models can be used to approach this problem:\n\n1) Pooled OLS (assumes all observations come from \"one neighbourhood\", equivalent to the OLS model in the first scatterplot)\n2) No pooling OLS (conceptually the same as a dummy variable regression - assumes independence between all neighbourhoods)\n3) Saturated regression (adds interactive effects between `log(LotArea)_i` and `neighbourhood` to no pooling OLS)\n\nI will use no pooling OLS to demonstrate the rest of the workflow. There is definitely room for improving these models. In fact, this problem is a good candidate for multilevel models. They allow for information to be borrowed between neighbourhood clusters through partial pooling and removes the assumption of independence. This will help regularise the effects of small and imbalanced sample sizes across `neighbourhood`. I will apply the full workflow using multilevel models in the next post.\n\n#### Model specification\n\nThe no pooling regression is written out below, where $i$ indexes the property and $j$ indexes each neighbourhood. I've assigned a gaussian likelihood which assumes that the residuals are normally distributed. \n\n$$\ny_i \\sim Normal(\\mu_i, \\sigma) \\\\\n \\\\\n\\mu_i = \\alpha_{j} + \\beta * x_i \\\\\n$$\nWhere $y_i$ is `log(SalesPrice)` and $x_i$ is `log(LotArea)` scaled to mean 0 and standard deviation 1. $\\alpha_j$ is an intercept parameter for the jth neighbourhood in the sample. The slope coefficient can be interpreted as: a one standard deviation increase in `log(LotArea)` is a $\\beta$ standard deviation change in `log(SalesPrice)`. \n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Standardise predictors\ndef z_std(x):\n    \"\"\"\n    Centres at mean 0 and standard deviation 1\n    \"\"\"\n    z_score = (x - x.mean()) / x.std()\n    return(z_score)\n    \n# Center and scale predictor\ndf['log_lot_area_z'] = z_std(df['log_lot_area'])\n\n# Scale target\ndf['log_sales_price_z'] = z_std(df['log_sales_price'])\n```\n:::\n\n\n$$\ny_i = \\frac{log(SalesPrice)_i - \\overline{log(SalesPrice)}}{\\sigma_{log(SalesPrice)}} \\\\\nx_i = \\frac{log(LotArea)_i - \\overline{log(LotArea)}}{\\sigma_{log(LotArea)}}\n$$\n\nStandardising both outcome and predictor variables makes sampling from the posterior distribution easier when we fit the model. If we had more continuous regressors, we could also compare the parameters on the same scale. Standardising also plays an important role in setting priors as we'll see below.\n\n#### Selecting priors\n\nProbability distributions need to be assigned to the parameters for this to be a bayesian model. Setting priors is an opportunity to encode domain knowledge or results from related studies into the model. Unfortunately, I do not have much domain expertise or information about the context of this dataset to give very informative priors. So I have chosen to use weakly informative priors following the advice of the [Stan developers](https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations). This will help me regularise model predictions within the plausible outcome space.\n\nFor $\\beta$ I'll assign a $Normal(0, 1)$ which puts ~95\\% of the probability between two standard deviations for a unit increase in $x$. We want to hedge against overfitting by shrinking the coefficient towards zero. This is achieved by putting probability mass on all plausible values of $\\beta$ with less weight on extreme relationships.\n\n$\\alpha_j$ is the intercept for the $j^{th}$ neighbourhood. In a pooled OLS regression between price and lot area, the intercept $\\alpha$ (ignoring the neighbourhood means ignoring the j subscript) would be interpreted as the value of $y$ when $x$ is 0. Since $x$ has a mean of zero, $\\alpha$ has the additional interpretation as the value of $y$ when $x$ is equal to its sample mean. By construction, $\\alpha$ must be 0, the sample mean of $y$.\n\nSo in the case of $\\alpha_j$ I set a normal prior with a mean of 0 and a standard deviation of 1 for all neighbourhoods, regularising neighbourhood effects within two standard deviations of the grand mean of $y$. \n\nThe variance parameter $\\sigma$ is defined over positive real numbers. So our prior should only put probabilistic weight on positive values. In this case I've chosen a weakly regularising $exponential(1)$ prior. Other candidate priors are the Half-Cauchy distribution or the Half-Normal which has thinner tails.\n\nThese weakly informative priors express my belief that the parameters of this model would overfit the sample and that we need to regularise their effects. Standardising the variables made this job much easier and intuitive. All together the full model looks like:\n\n$$\ny_i \\sim Normal(\\mu_i, \\sigma) \\\\\n\\mu_i = \\alpha_{j} + \\beta * x_i \\\\\n\\alpha_j\\sim Normal(0, 1)\\\\\n\\beta\\sim Normal(0, 1) \\\\\n\\sigma\\sim exp(1)\n$$\n\n### 3)  Prior predictive checks - simulate data from the implied generative model\n\nPrior predictive checks are useful for understanding the implications of our priors. Parameters are simulated from the joint prior distribution and visualised to see the implied relationships between the target and predictor variables. This will help diagnose any problems with our assumptions and modelling decisions. These checks become more important for generalised linear models since the outcome and parameter space are different due to the link function. For example, priors on parameters in a logistic regression are in the  _log-odds space_ and may behave differently to our expectations on the _outcome space_.\n\nThe code below includes all the inputs necessary to estimate the model on the data. Setting `run_estimation = 0` means Stan will only simulate values from the joint prior distribution since the likelihood is not evaluated (thanks to Jim for this handy [tip](https://khakieconomics.github.io/2017/04/30/An-easy-way-to-simulate-fake-data-in-stan.html)). \n\n\n::: {.cell}\n\n```{.python .cell-code}\nno_pooling_stan_code = '''\n// No pooling model for predicting housing prices\ndata {\n    // Fitting the model on training data\n    int<lower=0> N; // Number of rows\n    int<lower=0> neighbourhood[N]; // neighbourhood categorical variable\n    int<lower=0> N_neighbourhood; // number of neighbourhood categories\n    vector[N] log_sales_price; // log sales price\n    vector[N] log_lot_area; // log lot area\n\n    // Adjust scale parameters in python\n    real alpha_sd;\n    real beta_sd;\n    \n    // Set to zero for prior predictive checks, set to one to evaluate likelihood\n    int<lower = 0, upper = 1> run_estimation;\n}\nparameters {\n    vector[N_neighbourhood] alpha; // Vector of alpha coefficients for each neighbourhood\n    real beta;\n    real<lower=0> sigma;\n}\nmodel {\n    // Priors\n    target += normal_lpdf(alpha | 0, alpha_sd);\n    target += normal_lpdf(beta | 0, beta_sd);\n    target += exponential_lpdf(sigma |1);\n    \n    // Likelihood\n    if(run_estimation==1){\n        target += normal_lpdf(log_sales_price | alpha[neighbourhood] + beta * log_lot_area, sigma);\n\n    }\n}\ngenerated quantities {\n    // Uses fitted model to generate values of interest\n    vector[N] log_lik; // Log likelihood\n    vector[N] y_hat; // Predictions using training data\n    {\n    for(n in 1:N){\n          log_lik[n] = normal_lpdf(log_sales_price | alpha[neighbourhood[n]] + beta * log_lot_area[n], sigma);\n          y_hat[n] = normal_rng(alpha[neighbourhood[n]] + beta * log_lot_area[n], sigma);      \n        }\n    }\n}\n'''\n\n# Dictionary contains all data inputs\nnpm_data_check = dict(N = len(df),\n                      log_sales_price = df['log_sales_price_z'],\n                      log_lot_area = df['log_lot_area_z'],\n                      neighbourhood = df['neighbourhood'],\n                      N_neighbourhood = len(df['neighbourhood'].unique()),\n                      alpha_sd = 1, \n                      beta_sd = 1, \n                      run_estimation = 0)\n\n# Compile stan model\nno_pooling_model = pystan.StanModel(model_code = no_pooling_stan_code)\n\n# Draw samples from joint prior distribution\nfit_npm_check = no_pooling_model.sampling(data=npm_data_check, seed = 12345)\n\n# Extract samples into a pandas dataframe\nnpm_df_check = fit_npm_check.to_dataframe()\n```\n:::\n\n\n> For the prior predictive checks, we recommend not cleaving too closely to the observed data and instead aiming for a prior data generating process that can produce plausible data sets, not necessarily ones that are indistinguishable from observed data. - [Visualisation Bayesian Workflow - Gabry, Simpson, Vehtari, Betancourt, Gelman (2019)](https://arxiv.org/abs/1709.01449)\n\nThe implied predictions of our priors are visualised below. I've arbitrarily chosen the 4th neighbourhood index ($\\alpha_{j=4}$) since the priors for the neighbourhoods are the same. Weakly informative priors should create bounds between possible values while allowing for some implausible relationships. Remembering that 95\\% of gaussian mass exists within two standard deviations of the mean is a useful guide for determining what is reasonable. \n\nLet's see an example of setting uninformative priors and its implications of the data generating process. I've set the scale parameters for $\\alpha$ and $\\beta$ to be 10 which are quite diffuse. The implied predictions of the mean are much wider and well beyond the minimum and maximum values in the real data. This suggests that the model is giving too much probabilistic weight to highly implausible datasets. \n\n\n::: {.cell}\n\n```{.python .cell-code}\nnpm_data_check_wide = dict(N = len(df),\n                      log_sales_price = df['log_sales_price_z'],\n                      log_lot_area = df['log_lot_area_z'],\n                      neighbourhood = df['neighbourhood'],\n                      N_neighbourhood = len(df['Neighborhood'].unique()),\n                      alpha_sd = 10, \n                      beta_sd = 10, \n                      run_estimation = 0)\n\nfit_npm_check_wide = no_pooling_model.sampling(data=npm_data_check_wide)\nnpm_df_check_wide = fit_npm_check_wide.to_dataframe()\n\n_, ax = plt.subplots(figsize = (13, 8))\n\nx = np.linspace(-3, 3, 200)\n\nfor alpha, beta in zip(npm_df_check_wide[\"alpha[4]\"][:100], npm_df_check_wide[\"beta\"][:100]):\n    y = alpha + beta * x\n    ax.plot(x, y, c=\"k\", alpha=0.4)\n\nax.set_xlabel(\"x (z-scores)\")\nax.set_ylabel(\"Fitted y (z-scores)\")\nax.set_title(\"Prior predictive checks -- Uninformative (flat) priors\");\n```\n:::\n\n\n<center>\n![](figures/5_prior_predictive_check_wide.svg)\n</center>\n\nOur original scale parameters of 1 produce more reasonable relationships. There are still some extreme regression lines implied by our data generating process, but they are bound to more realistic outcomes relative to the diffuse priors.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n_, ax = plt.subplots(figsize = (13, 8))\n\nx = np.linspace(-3, 3, 200)\n\nfor alpha, beta in zip(npm_df_check[\"alpha[4]\"][:100], npm_df_check[\"beta\"][:100]):\n    y = alpha + beta * x\n    ax.plot(x, y, c=\"blue\", alpha=0.4)\n\nax.set_xlabel(\"x (z-scores)\")\nax.set_ylabel(\"Fitted y (z-scores)\")\nax.set_title(\"Prior predictive checks -- Weakly regularizing priors\")\n```\n:::\n\n\n\n<center>\n![](figures/4_prior_predictive_check.svg)\n</center>\n\nPutting both sets of lines on the same scale emphasises the difference in simulated values. The blue lines from the previous graph cover a tighter space relative to the simulations from the uninformative priors.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Putting both on the same scale\n_, ax = plt.subplots(figsize = (13, 8))\n\nfor alpha_wide, beta_wide in zip(npm_df_check_wide[\"alpha[4]\"][:100], npm_df_check_wide[\"beta\"][:100]):\n    y_wide = alpha_wide + beta_wide * x\n    ax.plot(x, y_wide, c=\"k\", alpha=0.4)\n    \nfor alpha, beta in zip(npm_df_check[\"alpha[4]\"][:100], npm_df_check[\"beta\"][:100]):\n    y = alpha + beta * x\n    ax.plot(x, y, c=\"blue\", alpha=0.2)\n\nax.set_xlabel(\"x (z-scores)\")\nax.set_ylabel(\"Fitted y (z-scores)\")\nax.set_title(\"Prior predictive checks -- Uninformative (black) vs weakly informative (blue)\")\n```\n:::\n\n\n<center>\n![](figures/5_prior_predictive_check_compare.svg)\n</center>\n\n### 4)  Fit model on fake data\nWe can use the simulations to see if our model can successfully estimate the parameters used to generate fake data (the implied $\\hat{y}$). Take a draw from the prior samples (e.g. the 50th simulation) and estimate the model on the data produced by these parameters. Let's see if the model fitted on fake data can capture the \"true\" parameters (dotted red lines) of the data generating process. If the model cannot capture the _known_ parameters which generated fake data, there is no certainty it will be estimating the correct parameters on real data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Pick random simulation, let's say 50\nrandom_draw = 50\n\n# Extract the simulated (fake) data implied by the parameters in sample 50\ny_sim = npm_df_check.filter(regex = 'y_hat').iloc[random_draw, :]\n\n# Extract the parameters corresponding to sample 10\ntrue_parameters = npm_df_check.filter(regex = 'alpha|beta|sigma').iloc[random_draw, :]\n\n# Fit the model on the fake data\n_npm_data_check = dict(N = len(df),\n              log_sales_price = y_sim, # this is now fitting on the extracted fake data in sample 50\n              log_lot_area = df['log_lot_area_z'],\n              neighbourhood = df['neighbourhood'],\n              N_neighbourhood = len(df['Neighborhood'].unique()),\n              alpha_sd = 1, \n              beta_sd = 1, \n              run_estimation = 1)\n\n_fit_npm_check = no_pooling_model.sampling(data=_npm_data_check, seed = 12345)\n_npm_df_check = _fit_npm_check.to_dataframe()\nfake_fit = _npm_df_check.filter(regex = 'alpha|beta|sigma')\nparameter_df = pd.melt(fake_fit)\n\n# Plot will give distributions of all parameters to see if it can capture the known parameters\nfig, axes = plt.subplots(nrows=max(2, math.ceil(fake_fit.shape[1] / 6)), ncols=6, sharex=False, sharey = False, figsize=(21,13))\nfig.suptitle('Model Checking - red lines are \"true\" parameters', size = 30)\naxes_list = [item for sublist in axes for item in sublist] \nparameters = parameter_df[['variable']].drop_duplicates().set_index('variable').index\ngrouped = parameter_df.groupby(\"variable\")\n\nfor parameter in parameters:\n    selection = grouped.get_group(parameter)\n    ax = axes_list.pop(0)\n    selection.plot.kde(label=parameter, ax=ax, legend=False)\n    ax.set_title(parameter)\n    ax.grid(linewidth=0.25)\n    ax.axvline(x=true_parameters[parameter], color='red', linestyle='--', alpha = 0.5)\n\n# Now use the matplotlib .remove() method to delete anything we didn't use\nfor ax in axes_list:\n    ax.remove()\n\nplt.tight_layout()\n```\n:::\n\n\n<center>\n![](figures/6_fit_fake_data.svg)\n</center>\n\nThe model sufficiently captured the known parameters. The next post will go through a more interesting example where this fails and requires us to rethink how we specified our models.\n\n### 5)  Estimate model on real data\n\nSet `run_estimation=1` and run the code to fit the model. Stan will sample the joint posterior distribution using the default Markov chain Monte Carlo (MCMC) algorithm, the [No-U-Turn sampler (NUTs)](https://mc-stan.org/docs/2_18/reference-manual/hmc-algorithm-parameters.html).\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Dictionary with data inputs - set run_estimation=1\nnpm_data = dict(N = len(df),\n              log_sales_price = df['log_sales_price_z'],\n              log_lot_area = df['log_lot_area_z'],\n              neighbourhood = df['neighbourhood'],\n              N_neighbourhood = len(df['Neighborhood'].unique()),\n              alpha_sd = 1, \n              beta_sd = 1, \n              run_estimation = 1)\n\n# Fit model by sampling from posterior distribution\nfit_npm = no_pooling_model.sampling(data=npm_data)\n\n# For generating visualisations using the arviz package\nnpm_az = az.from_pystan(\n    posterior=fit_npm,\n    posterior_predictive=\"y_hat\",\n    observed_data=\"log_sales_price\",\n    log_likelihood='log_lik',\n)\n\n# Extract samples into dataframe\nfit_npm_df = fit_npm.to_dataframe()\n```\n:::\n\n\n### 6) Check whether MCMC sampler and model fit<!--{.tabset .tabset-fade .tabset-pills}-->\nStan won't have trouble sampling from such a simple model, so I won't go through chain diagnostics in detail. I've included number of effective samples and Rhat diagnostics for completeness. We can see the posterior distributions of all the parameters by looking at the traceplot as well.\n\n#### Traceplot\n\n::: {.cell}\n\n```{.python .cell-code}\n# Inspect model fit\naz.plot_trace(fit_npm, \n              var_names=[\"alpha\", \"beta\", \"sigma\"], \n              compact = True, \n              chain_prop = 'color')\n```\n:::\n\n\n<center>\n![](figures/7_trace_plot.png)\n</center>\n\n#### Posterior distributions\n\n::: {.cell}\n\n```{.python .cell-code}\n# Inspect model fit\naxes = az.plot_forest(fit_npm, \n              var_names=[\"alpha\", \"beta\", \"sigma\"],\n              combined = True)\n\naxes[0].set_title('Posterior distributions of fitted parameters')\n```\n:::\n\n<center>\n![](figures/7_posterior.svg)\n</center>\n\n#### neff / Rhat\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(pystan.stansummary(fit_npm, \n                         pars=['alpha', 'beta', 'sigma'], \n                         probs=(0.025, 0.50, 0.975), \n                         digits_summary=3))\n```\n:::\n\n\n```\nInference for Stan model: anon_model_9d4f76eb27d91c6b75464a26e0b032c7.\n4 chains, each with iter=2000; warmup=1000; thin=1;\npost-warmup draws per chain=1000, total post-warmup draws=4000.\n\n            mean se_mean     sd   2.5%    50%  97.5%  n_eff   Rhat\nalpha[1]   1.004   0.002  0.148   0.71  1.004  1.288   6313  0.999\nalpha[2]   0.565   0.005  0.401 -0.211  0.564  1.334   6117  0.999\nalpha[3]  -0.102   0.002  0.162 -0.412 -0.102  0.212   4685    1.0\nalpha[4]  -0.686 9.71e-4  0.082 -0.845 -0.686 -0.523   7060    1.0\nalpha[5]   0.003   0.002  0.121 -0.2292.25e-4  0.245   6299    1.0\nalpha[6]    0.33 5.69e-4  0.051  0.229   0.33  0.429   7894  0.999\nalpha[7]    0.34   0.001  0.087  0.169  0.339  0.507   7475    1.0\nalpha[8]   -0.78 6.89e-4  0.059 -0.895 -0.781 -0.664   7357    1.0\nalpha[9]   0.215 9.01e-4  0.068  0.082  0.215   0.35   5743  0.999\nalpha[10] -1.328   0.001  0.101 -1.525 -1.329 -1.132   7365    1.0\nalpha[11]  -0.41   0.002  0.159 -0.715 -0.408 -0.105   5670    1.0\nalpha[12] -0.319 9.71e-4  0.087 -0.496  -0.32 -0.142   8023  0.999\nalpha[13]  -0.44 4.84e-4  0.041  -0.52  -0.44 -0.362   7346  0.999\nalpha[14]  0.312   0.002  0.202 -0.087  0.313  0.714   7154  0.999\nalpha[15]    0.1 8.56e-4  0.071  -0.04    0.1   0.24   6834  0.999\nalpha[16]   1.37   0.001  0.095  1.181  1.369  1.561   6408    1.0\nalpha[17]  1.412 8.08e-4  0.068  1.277  1.412  1.546   7174  0.999\nalpha[18] -0.685 6.69e-4  0.057 -0.797 -0.685  -0.57   7138  0.999\nalpha[19] -0.362   0.001  0.122 -0.598 -0.362 -0.127   7838    1.0\nalpha[20] -0.597 7.55e-4  0.071 -0.733 -0.597 -0.456   8863  0.999\nalpha[21]  0.121  9.7e-4  0.079 -0.036   0.12  0.274   6678  0.999\nalpha[22]  0.869 7.96e-4  0.066  0.739  0.869  0.995   6790    1.0\nalpha[23]   1.42   0.001  0.123  1.176  1.421  1.659   7563    1.0\nalpha[24]  0.503   0.001  0.099   0.31  0.501  0.699   7092    1.0\nalpha[25]  0.515   0.002  0.179  0.167  0.515  0.868   7366  0.999\nbeta       0.347 3.71e-4  0.021  0.307  0.347  0.387   3126  0.999\nsigma      0.607 1.37e-4  0.011  0.586  0.607  0.629   6687  0.999\n\nSamples were drawn using NUTS at Thu Nov 12 11:48:18 2020.\nFor each parameter, n_eff is a crude measure of effective sample size,\nand Rhat is the potential scale reduction factor on split chains (at \nconvergence, Rhat=1).\n```\n\n\n\n### 7) Posterior predictive check to evaluate model performance\nHow well did the model perform? We can perform posterior predictive checks to see if sampled distributions from the fitted model can approximate the density of `SalesPrice`. If the model performs well, it should be able to retrodict the density of the data used to train the model. The blue lines are the predictions drawn from the joint posterior distribution compared with the observed density of the target $y$ variable.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Select 300 samples to plot against observed distribution\naz.plot_ppc(data = npm_az, \n            kind = 'kde', \n            data_pairs = {'log_sales_price' : 'y_hat'},\n            legend = True,\n            color='cyan',\n            mean = False,\n            figsize=(8, 5),\n            alpha = 0.5,\n            num_pp_samples=300)\n```\n:::\n\n\n<center>\n![](figures/8_posterior_predictive_check.png)\n</center>\n\nReversing the data transformations gives back the posterior predictive checks on the natural scale (rescale $y$ and exponentiate `log(SalesPrice)` to get back `SalesPrice`):\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, axes = pl#| t.subplots(1,1, figsize = (13, 8))\nnp.exp(fit_npm_df.filter(regex = 'y_hat')*df['log_sales_price'].std()+df['log_sales_price'].mean())\\\n                 .T\\\n                 .iloc[:, :300]\\\n                 .plot.kde(legend = False, \n                           title = 'Posterior predictive Checks - Black: Observed Sale Price, blue: posterior samples', \n                           xlim = (30000,500000),\n                           alpha = 0.08,\n                           ax = axes, color = 'aqua');\n\ndf['SalePrice'].plot.kde(legend = False, \n                         xlim = (30000,500000),\n                         alpha = 1,\n                         ax = axes,\n                         color = 'black');\n```\n:::\n\n<center>\n![](figures/9_posterior_predictive_check_outcomescale.png)\n</center>\n\nNot bad for a simple model. There is definitely room for iteration and improvement.\n\n## R\n\n### 1) Exploratory data analysis and data transformation\nThe full dataset for this competition contains 79 features to predict the target variable `SalesPrice`. For this exercise I will focus on two variables: `Neighbourhood` (categorical: physical locations within Ames city limits) and `LotArea` (positive real: lot size in square feet). I chose these variables as they are consistent with my understanding of how housing prices vary in relation to their location and property size.\n\nAside: The model and feature selection in this example are deliberately simple. The goal is to motivate workflow, diagnostics and to interrogate assumptions, so I only used two variables to make it easier to follow. My [repo](https://github.com/bennywee/house_prices_kaggle) contains examples of other models and additional features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rstan)\nlibrary(bayesplot)\n\n# Detect cores for parallel sampling\noptions(mc.cores = parallel::detectCores())\n\n# Load data, select variables, apply log transformation\ndf <-  read_csv('data/train.csv') %>% \n  select('SalePrice', 'LotArea', 'Neighborhood')%>% \n  mutate(log_sales_price = log(SalePrice),\n         log_lot_area = log(LotArea),\n         neighbourhood = as.integer(as.factor(Neighborhood)))\nhead(df)\n```\n:::\n\n\n\n\n\nA scatter plot shows a positive correlation between `log(SalePrice)` and `log(LotArea)`. Fitting OLS on the logarithms of both variables assumes a linear relationship on the multiplicative scale. All else equal, property prices tend to be higher with larger lot sizes. However, this univariate linear model clearly underfits the data and there are almost surely unobserved confounding variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = log_lot_area, y = log_sales_price)) +\n  geom_point(colour = 'blue') +\n  geom_smooth(method = lm, se = FALSE, formula = 'y ~ x') + \n  ggsave('figures/2r_pooling_scatter.png', dpi = 300, width=10, height = 8, units = 'in')\n```\n:::\n\n\n<center>\n![](figures/2r_pooling_scatter.svg){width=80%}\n</center>\n\nA potential reason for underfitting may be some neighbourhoods have higher average prices than other neighbourhoods (which would result in different intercepts). Furthermore, the _association_ between housing prices and lot size may depend on different neighbourhoods as well (varying slopes). This variation could be driven by different zonings or housing densities within neighbourhoods that could impact the relationship between lot size and prices. Splitting the plot out by neighbourhood displays the heterogeneity in linear trends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = log_lot_area, y = log_sales_price)) +\n  geom_point(colour = 'blue') +\n  geom_smooth(method = lm, se = FALSE, formula = 'y ~ x', fullrange = TRUE) +\n  facet_wrap(~Neighborhood) +\n  theme(strip.background = element_blank())\n```\n:::\n\n\n<center>\n![](figures/3r_facet_scatter.svg)\n</center>\nWe can see variation in the slopes and intercepts as well as imbalanced sampling between neighbourhood clusters. This and other unobserved confounders probably contributed to some of the weak/negative gradients. The small sample sizes in some neighbourhoods will be prone to overfitting and will give noisy estimates which will require regularisation.  \n\n### 2) Write out full probability model\n\n3 basic linear models can be used to approach this problem:\n\n1) Pooled OLS (assumes all observations come from \"one neighbourhood\", equivalent to the OLS model in the first scatterplot)\n2) No pooling OLS (conceptually the same as a dummy variable regression - assumes independence between all neighbourhoods)\n3) Saturated regression (adds interactive effects between `log(LotArea)_i` and `neighbourhood` to no pooling OLS)\n\nI will use no pooling OLS to demonstrate the rest of the workflow. There is definitely room for improving these models. In fact, this problem is a good candidate for multilevel models. They allow for information to be borrowed between neighbourhood clusters through partial pooling and removes the assumption of independence. This will help regularise the effects of small and imbalanced sample sizes across `neighbourhood`. I will apply the full workflow using multilevel models in the next post.\n\n### Model specification\n\nThe no pooling regression is written out below, where $i$ indexes the property and $j$ indexes each neighbourhood. I've assigned a gaussian likelihood which assumes that the residuals are normally distributed. \n\n$$\ny_i \\sim Normal(\\mu_i, \\sigma) \\\\\n \\\\\n\\mu_i = \\alpha_{j} + \\beta * x_i \\\\\n$$\nWhere $y_i$ is `log(SalesPrice)` and $x_i$ is `log(LotArea)` scaled to mean 0 and standard deviation 1. $\\alpha_j$ is an intercept parameter for the jth neighbourhood in the sample. The slope coefficient can be interpreted as: a one standard deviation increase in `log(LotArea)` is a $\\beta$ standard deviation change in `log(SalesPrice)`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf  <-  df %>% mutate(log_lot_area_z = scale(log_lot_area),\n                    log_sales_price_z = scale(log_sales_price))\n```\n:::\n\n\n$$\ny_i = \\frac{log(SalesPrice)_i - \\overline{log(SalesPrice)}}{\\sigma_{log(SalesPrice)}} \\\\\nx_i = \\frac{log(LotArea)_i - \\overline{log(LotArea)}}{\\sigma_{log(LotArea)}}\n$$\nStandardising both outcome and predictor variables makes sampling from the posterior distribution easier when we fit the model. If we had more continuous regressors, we could also compare the parameters on the same scale. Standardising also plays an important role in setting priors as we'll see below.\n\n### Selecting priors\n\nProbability distributions need to be assigned to the parameters for this to be a bayesian model. Setting priors is an opportunity to encode domain knowledge or results from related studies into the model. Unfortunately, I do not have much domain expertise or information about the context of this dataset to give very informative priors. So I have chosen to use weakly informative priors following the advice of the [Stan developers](https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations). This will help me regularise model predictions within the plausible outcome space.\n\nFor $\\beta$ I'll assign a $Normal(0, 1)$ which puts ~95\\% of the probability between two standard deviations for a unit increase in $x$. We want to hedge against overfitting by shrinking the coefficient towards zero. This is achieved by putting probability mass on all plausible values of $\\beta$ with less weight on extreme relationships.\n\n$\\alpha_j$ is the intercept for the $j^{th}$ neighbourhood. In a pooled OLS regression between price and lot area, the intercept $\\alpha$ (ignoring the neighbourhood means ignoring the j subscript) would be interpreted as the value of $y$ when $x$ is 0. Since $x$ has a mean of zero, $\\alpha$ has the additional interpretation as the value of $y$ when $x$ is equal to its sample mean. By construction, $\\alpha$ must be 0, the sample mean of $y$.\n\nSo in the case of $\\alpha_j$ I set a normal prior with a mean of 0 and a standard deviation of 1 for all neighbourhoods, regularising neighbourhood effects within two standard deviations of the grand mean of $y$. \n\nThe variance parameter $\\sigma$ is defined over positive real numbers. So our prior should only put probabilistic weight on positive values. In this case I've chosen a weakly regularising $exponential(1)$ prior. Other candidate priors are the Half-Cauchy distribution or the Half-Normal which has thinner tails.\n\nThese weakly informative priors express my belief that the parameters of this model would overfit the sample and that we need to regularise their effects. Standardising the variables made this job much easier and intuitive. All together the full model looks like:\n\n$$\ny_i \\sim Normal(\\mu_i, \\sigma) \\\\\n\\mu_i = \\alpha_{j} + \\beta * x_i \\\\\n\\alpha_j\\sim Normal(0, 1)\\\\\n\\beta\\sim Normal(0, 1) \\\\\n\\sigma\\sim exp(1)\n$$\n\n### 3)  Prior predictive checks - simulate fake data from the implied generative model\n\nPrior predictive checks are useful for understanding the implications of our priors. Parameters are simulated from the joint prior distribution and visualised to see the implied relationships between the target and predictor variables. This will help diagnose any problems with our assumptions and modelling decisions. These checks become more important for generalised linear models since the outcome and parameter space are different due to the link function. For example, priors on parameters in a logistic regression are in the  _log-odds space_ and may behave differently to our expectations on the _outcome space_.\n\nThe code below includes all the inputs necessary to estimate the model on the data. Setting `run_estimation = 0` means Stan will only simulate values from the joint prior distribution since the likelihood is not evaluated (thanks to Jim for this handy [tip](https://khakieconomics.github.io/2017/04/30/An-easy-way-to-simulate-fake-data-in-stan.html)). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_pooling_stan_code = \"\n// No pooling model for predicting housing prices\ndata {\n    // Fitting the model on training data\n    int<lower=0> N; // Number of rows\n    int<lower=0> neighbourhood[N]; // neighbourhood categorical variable\n    int<lower=0> N_neighbourhood; // number of neighbourhood categories\n    vector[N] log_sales_price; // log sales price\n    vector[N] log_lot_area; // log lot area\n\n    // Adjust scale parameters in python\n    real alpha_sd;\n    real beta_sd;\n    \n    // Set to zero for prior predictive checks, set to one to evaluate likelihood\n    int<lower = 0, upper = 1> run_estimation;\n}\nparameters {\n    vector[N_neighbourhood] alpha; // Vector of alpha coefficients for each neighbourhood\n    real beta;\n    real<lower=0> sigma;\n}\nmodel {\n    // Priors\n    target += normal_lpdf(alpha | 0, alpha_sd);\n    target += normal_lpdf(beta | 0, beta_sd);\n    target += exponential_lpdf(sigma |1);\n    //target += normal_lpdf(sigma |0, 1);\n    \n    // Likelihood\n    if(run_estimation==1){\n        target += normal_lpdf(log_sales_price | alpha[neighbourhood] + beta * log_lot_area, sigma);\n\n    }\n}\ngenerated quantities {\n    // Uses fitted model to generate values of interest without re running the sampler\n    vector[N] log_lik; // Log likelihood\n    vector[N] y_hat; // Predictions using training data\n    {\n    for(n in 1:N){\n          log_lik[n] = normal_lpdf(log_sales_price | alpha[neighbourhood[n]] + beta * log_lot_area[n], sigma);\n          y_hat[n] = normal_rng(alpha[neighbourhood[n]] + beta * log_lot_area[n], sigma);      \n        }\n    }\n}\n\"\n\n# List contains all data inputs\nnpm_data_check = list(N = nrow(df),\n                      log_sales_price = as.vector(df$log_sales_price_z),\n                      log_lot_area = as.vector(df$log_lot_area_z),\n                      neighbourhood = as.vector(df$neighbourhood),\n                      N_neighbourhood = max(df$neighbourhood),\n                      alpha_sd = 1, \n                      beta_sd = 1, \n                      run_estimation = 0)\n\n# Draw samples from joint prior distribution\nfit_npm_check = stan(model_code = no_pooling_stan_code, data = npm_data_check, chains = 4, seed = 12345)\n\n# Extract samples into a pandas dataframe\nnpm_df_check = as.data.frame(fit_npm_check)\n```\n:::\n\n\n> For the prior predictive checks, we recommend not cleaving too closely to the observed data and instead aiming for a prior data generating process that can produce plausible data sets, not necessarily ones that are indistinguishable from observed data. - [Visualisation Bayesian Workflow - Gabry, Simpson, Vehtari, Betancourt, Gelman (2019)](https://arxiv.org/abs/1709.01449)\n\nThe implied predictions of our priors are visualised below. I've arbitrarily chosen the 4th neighbourhood index ($\\alpha_{j=4}$) since the priors for the neighbourhoods are the same. Weakly informative priors should create bounds between possible values while allowing for some implausible relationships. Remembering that 95\\% of gaussian mass exists within two standard deviations of the mean is a useful guide for determining what is reasonable. \n\nLet's see an example of setting uninformative priors and its implications of the data generating process. I've set the scale parameters for $\\alpha$ and $\\beta$ to be 10 which are quite diffuse. The implied predictions of the mean are much wider and well beyond the minimum and maximum values in the real data. This suggests that the model is giving too much probabilistic weight to highly implausible datasets. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit model with diffuse priors\nnpm_data_check_wide = list(N = nrow(df),\n                      log_sales_price = as.vector(df$log_sales_price_z),\n                      log_lot_area = as.vector(df$log_lot_area_z),\n                      neighbourhood = as.vector(df$neighbourhood),\n                      N_neighbourhood = max(df$neighbourhood),\n                      alpha_sd = 10, \n                      beta_sd = 10, \n                      run_estimation = 0)\n\nfit_npm_check_wide = stan(model_code = no_pooling_stan_code, data=npm_data_check_wide, chains = 4, seed = 12345)\nnpm_df_check_wide = as.data.frame(fit_npm_check_wide)\n\n# Create length of std x variables\nx <- seq(from = -3, to = 3, length.out = 200)\n\n# Create empty dataframe and fill it with parameters\ndf_wide <- as.data.frame(matrix(ncol=100, nrow=200))\nfor (i in 1:100) {\n  alpha <- npm_df_check_wide$`alpha[4]`[i]\n  beta <- npm_df_check_wide$beta[i]\n  df_wide[, i] <- alpha + beta * x\n  \n}\n\n# Tidy up filled dataframe\ndf_wide <- df_wide %>% mutate(x = x) %>% pivot_longer(starts_with(\"V\"))\n\n# Plot\nggplot(df_wide, aes(x = x, y = value)) +\n  geom_line(aes(group = name), size = 0.2) +\n  scale_x_continuous(breaks = seq(-3, 3, 1)) +\n  labs(title = 'Prior predictive checks -- Uninformative (flat) priors',\n             x = 'x (z-scores)',\n             y = 'Fitted y (z_scores)')\n```\n:::\n\n<center>\n![](figures/5r_prior_predictive_check_wide.svg)\n</center>\n\nOur original scale parameters of 1 produce more reasonable relationships. There are still some extreme regression lines implied by our data generating process, but they are bound to more realistic outcomes relative to the diffuse priors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create length of std x variables\nx <- seq(from = -3, to = 3, length.out = 200)\n\n# Create empty dataframe and fill it with parameters\ndf_regularising <- as.data.frame(matrix(ncol=100, nrow=200))\nfor (i in 1:100) {\n  alpha <- npm_df_check$`alpha[4]`[i]\n  beta <- npm_df_check$beta[i]\n  df_regularising[, i] <- alpha + beta * x\n  \n}\n\n# Tidy up filled dataframe\ndf_regularising <- df_regularising %>% mutate(x = x) %>% pivot_longer(starts_with(\"V\"))\n\n# Plot\nggplot(df_regularising, aes(x = x, y = value)) +\n  geom_line(aes(group = name), size = 0.2) +\n  scale_x_continuous(breaks = seq(-3, 3, 1)) +\n  labs(title = 'Prior predictive checks -- Weakly regularizing priors',\n             x = 'x (z-scores)',\n             y = 'Fitted y (z_scores)')\n```\n:::\n\n\n<center>\n![](figures/4r_prior_predictive_check.svg)\n</center>\n\nPutting both sets of lines on the same scale emphasises the difference in simulated values. The blue lines from the previous graph cover a tighter space relative to the simulations from the uninformative priors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_wide, aes(x = x, y = value)) +\n  geom_line(aes(group = name), size = 0.2) +\n  geom_line(data = df_regularising, aes(group = name), size = 0.2, colour = 'blue') +\n  scale_x_continuous(breaks = seq(-3, 3, 1)) +\n  labs(title = 'Prior predictive checks -- Uninformative (flat) priors',\n             x = 'x (z-scores)',\n             y = 'Fitted y (z_scores)') \n```\n:::\n\n\n<center>\n![](figures/5r_prior_predictive_check_compare.svg)\n</center>\n\n### 4)  Fit model on fake data\nWe can use the simulations to see if our model can successfully estimate the parameters used to generate fake data (the implied $\\hat{y}$). Take a draw from the prior samples (e.g. the 50th simulation) and estimate the model on the data produced by these parameters. Let's see if the model fitted on fake data can capture the \"true\" parameters (dotted red lines) of the data generating process. If the model cannot capture the _known_ parameters which generated fake data, there is no certainty it will be estimating the correct parameters on real data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pick random simulation, let's say 50\nrandom_draw <- 50\n\n# Extract the simulated (fake) data implied by the parameters in sample 50\ny_sim <-  npm_df_check[random_draw, ] %>% select(contains('y_hat')) %>% t()\n\n# Extract the parameters corresponding to sample 50\ntrue_parameters = npm_df_check[random_draw,] %>% select(contains(c('alpha','beta','sigma')))\n\n# List contains all data inputs\nnpm_data_check_ = list(N = nrow(df),\n                      log_sales_price = as.vector(y_sim), # target is now extracted fake data in sample 50\n                      log_lot_area = as.vector(df$log_lot_area_z),\n                      neighbourhood = as.vector(df$neighbourhood),\n                      N_neighbourhood = max(df$neighbourhood),\n                      alpha_sd = 1, \n                      beta_sd = 1, \n                      run_estimation = 1)\n\n# Fit the model on the fake data\nfit_npm_check_ = stan(model_code = no_pooling_stan_code, data=npm_data_check_, chains = 4, seed = 12345)\nnpm_df_check_ = as.data.frame(fit_npm_check_)\n\n# Extract parameters and tidy dataframe\nfake_fit = npm_df_check_ %>% select(contains(c('alpha', 'beta', 'sigma')))\nparameter_df = fake_fit %>% pivot_longer(everything()) %>% rename(parameters = name)\nparameter_df$parameters <- factor(parameter_df$parameters, levels = (parameter_df$parameters %>% unique()))\n\n# Plot will give distributions of all parameters to see if it can capture the known parameters\nggplot(parameter_df, aes(value)) + \n  geom_density(colour = 'blue') + \n  facet_wrap(~parameters, scales = 'free') + \n  geom_vline(data = (true_parameters %>% pivot_longer(everything()) %>% rename(parameters = name)), aes(xintercept = value), colour = 'red') + \n  labs(title = 'Model Checking - red lines are \"true\" parameters',\n       x = '') + \n  theme(strip.background = element_blank()) \n```\n:::\n\n<center>\n![](figures/6r_fit_fake_data.svg)\n</center>\n\n### 5)  Estimate model on real data\nSet `run_estimation=1` and run the code to fit the model. Stan will sample the joint posterior distribution using the default Markov chain Monte Carlo (MCMC) algorithm, the [No-U-Turn sampler (NUTs)](https://mc-stan.org/docs/2_18/reference-manual/hmc-algorithm-parameters.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dictionary with data inputs - set run_estimation=1\nnpm_data = list(N = nrow(df),\n                      log_sales_price = as.vector(df$log_sales_price_z),\n                      log_lot_area = as.vector(df$log_lot_area_z),\n                      neighbourhood = as.vector(df$neighbourhood),\n                      N_neighbourhood = max(df$neighbourhood),\n                      alpha_sd = 1, \n                      beta_sd = 1, \n                      run_estimation = 1)\n\n# Fit model by sampling from posterior distribution\nfit_npm = stan(model_code = no_pooling_stan_code, data = npm_data, chains = 4, seed = 12345)\n\n# Extract samples into dataframe\nfit_npm_df = as.data.frame(fit_npm)\n```\n:::\n\n\n### 6) Check whether MCMC sampler and model fit<!--{.tabset .tabset-fade .tabset-pills}-->\nStan won't have trouble sampling from such a simple model, so I won't go through chain diagnostics in detail. I've included number of effective samples and Rhat diagnostics for completeness. We can see the posterior distributions of all the parameters by looking at the traceplot as well.\n\n#### Traceplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect model fit\ncolor_scheme_set(\"mix-blue-red\")\n\nmcmc_combo(\n as.array(fit_npm),\n combo = c(\"dens_overlay\", \"trace\"),\n pars = c('alpha[1]', 'beta', 'sigma'),\n gg_theme = legend_none()) \n```\n:::\n\n\n<center>\n![](figures/7r_traceplot.svg)\n</center>\n\n#### Posterior distributions\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_plot(fit_npm, \n          show_density = FALSE, \n          unconstrain = TRUE, \n          pars = c('alpha', 'beta', 'sigma')) + \n  labs(title = 'Posterior distributions of fitted parameters')\n```\n:::\n\n\n<center>\n![](figures/7r_posterior.svg)\n</center>\n\n#### neff / Rhat\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(fit_npm, pars = c('alpha', 'beta', 'sigma'), \n                         probs=c(0.025, 0.50, 0.975), \n                         digits_summary=3)\n```\n:::\n\n\n```\nInference for Stan model: 2be0e54fe1314f469f9b784aa4444aba.\n4 chains, each with iter=2000; warmup=1000; thin=1; \npost-warmup draws per chain=1000, total post-warmup draws=4000.\n\n            mean se_mean    sd   2.5%    50%  97.5% n_eff  Rhat\nalpha[1]   1.005   0.002 0.148  0.708  1.007  1.291  5778 1.000\nalpha[2]   0.565   0.005 0.395 -0.218  0.567  1.348  7517 1.000\nalpha[3]  -0.099   0.002 0.165 -0.426 -0.099  0.221  5493 1.000\nalpha[4]  -0.687   0.001 0.083 -0.855 -0.686 -0.523  7361 1.000\nalpha[5]   0.001   0.001 0.122 -0.237  0.001  0.241  6665 0.999\nalpha[6]   0.330   0.000 0.050  0.233  0.330  0.426 10574 0.999\nalpha[7]   0.340   0.001 0.086  0.175  0.340  0.506  7469 0.999\nalpha[8]  -0.777   0.001 0.061 -0.897 -0.776 -0.656  7542 0.999\nalpha[9]   0.216   0.001 0.071  0.073  0.216  0.355  7027 1.000\nalpha[10] -1.331   0.001 0.098 -1.524 -1.330 -1.136  8231 0.999\nalpha[11] -0.406   0.002 0.151 -0.705 -0.406 -0.100  5802 0.999\nalpha[12] -0.320   0.001 0.085 -0.488 -0.321 -0.153  7145 1.000\nalpha[13] -0.440   0.000 0.041 -0.519 -0.442 -0.361  7392 1.000\nalpha[14]  1.369   0.001 0.096  1.177  1.369  1.559  7084 0.999\nalpha[15]  0.315   0.002 0.199 -0.083  0.315  0.704  7174 1.000\nalpha[16]  1.412   0.001 0.070  1.274  1.412  1.548  6393 0.999\nalpha[17]  0.100   0.001 0.071 -0.039  0.099  0.244  7724 0.999\nalpha[18] -0.684   0.001 0.057 -0.797 -0.683 -0.574  8749 1.000\nalpha[19] -0.596   0.001 0.069 -0.730 -0.596 -0.461  6336 0.999\nalpha[20]  0.121   0.001 0.079 -0.036  0.122  0.282  7308 1.000\nalpha[21]  0.869   0.001 0.067  0.738  0.869  1.002  6553 1.000\nalpha[22]  1.422   0.001 0.122  1.181  1.421  1.667  7990 1.000\nalpha[23] -0.357   0.001 0.121 -0.586 -0.357 -0.122  7743 0.999\nalpha[24]  0.502   0.001 0.099  0.311  0.501  0.692  7553 0.999\nalpha[25]  0.517   0.002 0.181  0.166  0.516  0.881  8580 0.999\nbeta       0.348   0.000 0.021  0.307  0.348  0.389  3651 1.000\nsigma      0.607   0.000 0.011  0.585  0.607  0.630  8275 1.000\n\nSamples were drawn using NUTS(diag_e) at Thu Nov 12 11:58:44 2020.\nFor each parameter, n_eff is a crude measure of effective sample size,\nand Rhat is the potential scale reduction factor on split chains (at \nconvergence, Rhat=1).\n```\n\n### 7) Posterior predictive check to evaluate model fit\nHow well did the model perform? We can perform posterior predictive checks to see if sampled distributions from the fitted model can approximate the density of `SalesPrice`. If the model performs well, it should be able to retrodict the density of the data used to train the model. The blue lines are the predictions drawn from the joint posterior distribution compared with the observed density of the target $y$ variable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select 300 samples to plot against observed distribution\ncolor_scheme_set(scheme = \"blue\")\nyrep <- extract(fit_npm)[[\"y_hat\"]]\nsamples <- sample(nrow(yrep), 300)\nppc_dens_overlay(as.vector(df$log_sales_price_z), yrep[samples, ])\n```\n:::\n\n\n<center>\n![](figures/8r_posterior_predictive_check.png)\n</center>\n\nReversing the data transformations gives back the posterior predictive checks on the natural scale (rescale $y$ and exponentiate `log(SalesPrice)` to get back `SalesPrice`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Take 300 samples of posterior predictive checks and revert back to natural scale\nppc <- yrep[samples, ] %>% \n  t() %>% \n  apply(., MARGIN  = 2, FUN = function(x) exp((x * sd(df$log_sales_price)) + mean(df$log_sales_price))) %>% \n  as.data.frame() %>%\n  pivot_longer(everything())\n\n# Plot densities\nggplot(ppc, aes(value)) + \n  geom_density(aes(group = name), colour = \"lightblue\") + \n  geom_density(data = (df %>% select(SalePrice) %>% rename(value = SalePrice)), colour = 'black') +\n  theme(legend.position=\"none\", axis.text.y=element_blank()) +\n  labs(title = 'Posterior predictive checks - Black: observed SalePrice\\nLight Blue: Posterior Samples') +\n  ggsave('figures/9r_posterior_predictive_check_outcomescale.png', dpi = 300, height = 6, width = 9) \n```\n:::\n\n\n<center>\n![](figures/9r_posterior_predictive_check_outcomescale.png)\n</center>\nNot bad for a simple model. There is definitely room for iteration and improvement.\n\n:::\n\n## Conclusion\nThe last thing we should do is compare the fits of multiple models and evaluate their performance using cross validation for model selection. The next post applies the full workflow using multilevel models and compares performance using techniques such as Leave One Out - Cross Validation (LOO-CV). Model performance can also be evaluated on out of sample test data as well since this is a predictive task (Kaggle computes the log RMSE of the out of sample dataset).\n\nThis is not an exhaustive review of all the diagnostics and visualisations that can be performed in a workflow. There are many ways of evaluating model fit and diagnostics that could validate or invalidate the model. Below are a list of resources which give more detailed examples on various bayesian models and workflows:\n\n- [Stan case studies](https://mc-stan.org/users/documentation/case-studies) \n\n- [PyMC3 examples](https://docs.pymc.io/nb_examples/index.html) \n\n- Michael Betancourt's case study on a [Principled Bayesian Workflow](https://betanalpha.github.io/assets/case_studies/principled_bayesian_workflow.html#1_questioning_authority) and all his other [case studies](https://betanalpha.github.io/writing/)\n\n- [Bayesian Workflow](https://arxiv.org/abs/2011.01808) and some links to the development of bayesian workflow over the past few years can be found [here](https://statmodeling.stat.columbia.edu/2020/11/10/bayesian-workflow/)\n\n- [Robust Statistical Workflow with PyStan](https://mc-stan.org/users/documentation/case-studies/pystan_workflow.html)\n\n- [Robust Statistical Workflow with RStan](https://mc-stan.org/users/documentation/case-studies/rstan_workflow.html)\n\n\nNotebooks that reproduce the models/plots/etc:\n\n[Python](https://github.com/bennywee/house_prices_kaggle/blob/master/blog/blog_code_python.ipynb)\n\n[R](https://github.com/bennywee/house_prices_kaggle/blob/master/blog/blog_code_r.Rmd)\n\n[Return home](https://bennywee.github.io/)\n\n## Original Computing Environment\n```\n%load_ext watermark\n%watermark -n -v -u -iv -w -a Benjamin_Wee\n\nseaborn 0.11.0\npandas  1.1.3\narviz   0.10.0\npystan  2.19.0.0\nnumpy   1.19.1\nBenjamin_Wee \nlast updated: Thu Nov 19 2020 \n\nCPython 3.6.12\nIPython 5.8.0\nwatermark 2.0.2\n```\n```\nsessionInfo()\n\nR version 4.0.3 (2020-10-10)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Mojave 10.14.6\n\nMatrix products: default\nBLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib\n\nRandom number generation:\n RNG:     Mersenne-Twister \n Normal:  Inversion \n Sample:  Rounding \n \nlocale:\n[1] en_AU.UTF-8/en_AU.UTF-8/en_AU.UTF-8/C/en_AU.UTF-8/en_AU.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] gridExtra_2.3        gdtools_0.2.2        svglite_1.2.3.2      bayesplot_1.7.2      rstan_2.21.2        \n [6] StanHeaders_2.21.0-6 forcats_0.5.0        stringr_1.4.0        dplyr_1.0.2          purrr_0.3.4         \n[11] readr_1.4.0          tidyr_1.1.2          tibble_3.0.4         ggplot2_3.3.2        tidyverse_1.3.0     \n\nloaded via a namespace (and not attached):\n [1] httr_1.4.2         jsonlite_1.7.1     splines_4.0.3      modelr_0.1.8       RcppParallel_5.0.2 assertthat_0.2.1  \n [7] stats4_4.0.3       cellranger_1.1.0   yaml_2.2.1         pillar_1.4.6       backports_1.2.0    lattice_0.20-41   \n[13] reticulate_1.18    glue_1.4.2         digest_0.6.27      rvest_0.3.6        colorspace_1.4-1   htmltools_0.5.0   \n[19] Matrix_1.2-18      plyr_1.8.6         pkgconfig_2.0.3    broom_0.7.2        haven_2.3.1        scales_1.1.1      \n[25] processx_3.4.4     mgcv_1.8-33        generics_0.1.0     farver_2.0.3       ellipsis_0.3.1     withr_2.3.0       \n[31] cli_2.1.0          magrittr_1.5       crayon_1.3.4       readxl_1.3.1       evaluate_0.14      ps_1.4.0          \n[37] fs_1.5.0           fansi_0.4.1        nlme_3.1-149       xml2_1.3.2         pkgbuild_1.1.0     tools_4.0.3       \n[43] loo_2.3.1          prettyunits_1.1.1  hms_0.5.3          lifecycle_0.2.0    matrixStats_0.57.0 V8_3.4.0          \n[49] munsell_0.5.0      reprex_0.3.0       callr_3.5.1        compiler_4.0.3     systemfonts_0.3.2  rlang_0.4.8       \n[55] grid_4.0.3         ggridges_0.5.2     rstudioapi_0.11    labeling_0.4.2     rmarkdown_2.5      gtable_0.3.0      \n[61] codetools_0.2-16   inline_0.3.16      DBI_1.1.0          curl_4.3           reshape2_1.4.4     R6_2.5.0          \n[67] lubridate_1.7.9    knitr_1.30         utf8_1.1.4         stringi_1.5.3      parallel_4.0.3     Rcpp_1.0.5        \n[73] vctrs_0.3.4        dbplyr_2.0.0       tidyselect_1.1.0   xfun_0.19         \n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
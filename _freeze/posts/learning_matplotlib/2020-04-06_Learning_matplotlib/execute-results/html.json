{
  "hash": "6314c34d3dad00e273cc523c720a6a99",
  "result": {
    "markdown": "---\ntitle: 'Learning Matplotlib - Lessons from a ggplot user'\nauthor: \"Benjamin Wee\"\ndate: \"2020/04/06\"\n---\n\n# You never forget your first\n\nI love R. I wouldn't be where I am in my career without the tools of the Tidyverse and kindness of the Rstats and Rladies communities. It provided me a platform to entering data science, exposing me to the world of software engineering and development along the way. Choosing to use R over Stata for my Economics Honours thesis was probably the best choice I made (hides behind shield).\n\nI picked up new programming languages over the past two years working as a data scientist. The choice of programming languages at work are determined by the design of the tech stack and the analytics teams. We mostly use PySpark at work for exploratory data analysis (EDA) and \"feature engineering\". So far, I've managed. I picked up standard python libraries like Pandas and NumPy, machine learning libaries (MLlib) in Pyspark, and wrangled many tables in SQL. \n\nBut the _one_ thing I couldn't put myself through is learning how to plot in Python. I couldn't get over the ease and beauty of building visualisations using ggplot2. I would do all my work in SQL and pyspark, but I would _always_ finish off my EDA using ggplot.\n\n# Getting over the curve\n\nI've been finally pushing myself to get acquainted with Python plotting libraries. I figured that it wouldn't hurt being bilingual in the two main data science languages. Plus all the developers at work are all python useres (pythonistas?), so it would be jointly beneficial to communicate using the programming lingua franca.\n\nI found it difficult navigating the vast array of packages Python has for plotting. Matplotlib, seaborn, altair, bokeh, etc. But I realised that most of the higher level modules are built _on top_ of matplotlib. So while you may plot using a higher level package like seaborn, a lot of the tweaking is done using matplotlib functions.\n \nLearning matplotlib is difficult. The first thing which took me a while to wrap my head around was how I needed the data to be _structured_ to build the plots I wanted. Matplotlib requires data in a wide format, as opposed to a long (tidy) format when reading in components of the data. Seaborn was much easier to grasp as it requires long/tidy data structures when plotting. This feels more intuitive to me as a ggplot user.\n\n# Replicating KH's COVID Small Multiples in Matplotlib\n\nI came across [Kieran Healy's blog post](https://twitter.com/kjhealy/status/1243561750756196353) a couple of weeks ago where he plotted cumulative reported cases of the COVID-19 virus for the top 50 countries. I thought it would be a good exercise for me to try to replicate this in Matplotlib.\n\nI've always admired this style of visualisation It preserves the variation of all the countries while highlighting the key country you want to focus on for comparison and trend analysis. I use similar plots at work all the time to assist in presentations - a clean and compact way of presenting rich datasets.\n\nI saved myself the effort of recreating the dataset from scratch by using Kieran's R code found in his [COVID Github Repository](https://github.com/kjhealy/covid). The COVID data comes from the European Centre for Disease Prevention and Control (ECDC). Note that I have not checked the validity or accuracy of the data source or scraping process. This is just an exercise in creating a similar figure in Python.\n\n## Processing the data\n\nMost of the data preprocessing has been completed in the R script. However, there is still a bit of work requierd to get the necessary datasets and objects prepared for plotting. The exact data and scripts I used [here](https://github.com/bennywee/covid/tree/master/bw)\n\nFirst, load in the data, libraries and clean up some of the country labels.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as tick\n\n# Setting some Matplotlib parameters\nmpl.rcParams['figure.dpi']= 300\n# plt.style.use('seaborn-talk')\n\n# Replace the some of the country names with shorter labels\ndata = pd.read_csv('cov_case_curve2.csv')\\\n         .replace({'cname' : \n                   {'United States' : 'USA',\n                   'Iran, Islamic Republic of' : 'Iran',\n                   'Korea, Republic of' : 'South Korea', \n                   'United Kingdom' : 'UK'}})\\\n        .drop('Unnamed: 0', axis=1)\n\n# Show first 5 rows of the main dataset\ndata.sort_values(\"date\", ascending = False)\\\n\t.head()\\\n\t.style\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_4f554\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_4f554_level0_col0\" class=\"col_heading level0 col0\" >date</th>\n      <th id=\"T_4f554_level0_col1\" class=\"col_heading level0 col1\" >cname</th>\n      <th id=\"T_4f554_level0_col2\" class=\"col_heading level0 col2\" >iso3</th>\n      <th id=\"T_4f554_level0_col3\" class=\"col_heading level0 col3\" >cases</th>\n      <th id=\"T_4f554_level0_col4\" class=\"col_heading level0 col4\" >deaths</th>\n      <th id=\"T_4f554_level0_col5\" class=\"col_heading level0 col5\" >cu_cases</th>\n      <th id=\"T_4f554_level0_col6\" class=\"col_heading level0 col6\" >cu_deaths</th>\n      <th id=\"T_4f554_level0_col7\" class=\"col_heading level0 col7\" >days_elapsed</th>\n      <th id=\"T_4f554_level0_col8\" class=\"col_heading level0 col8\" >end_label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_4f554_level0_row0\" class=\"row_heading level0 row0\" >2205</th>\n      <td id=\"T_4f554_row0_col0\" class=\"data row0 col0\" >2020-04-06</td>\n      <td id=\"T_4f554_row0_col1\" class=\"data row0 col1\" >Viet Nam</td>\n      <td id=\"T_4f554_row0_col2\" class=\"data row0 col2\" >VNM</td>\n      <td id=\"T_4f554_row0_col3\" class=\"data row0 col3\" >1</td>\n      <td id=\"T_4f554_row0_col4\" class=\"data row0 col4\" >0</td>\n      <td id=\"T_4f554_row0_col5\" class=\"data row0 col5\" >241</td>\n      <td id=\"T_4f554_row0_col6\" class=\"data row0 col6\" >0</td>\n      <td id=\"T_4f554_row0_col7\" class=\"data row0 col7\" >14</td>\n      <td id=\"T_4f554_row0_col8\" class=\"data row0 col8\" >Viet Nam</td>\n    </tr>\n    <tr>\n      <th id=\"T_4f554_level0_row1\" class=\"row_heading level0 row1\" >2146</th>\n      <td id=\"T_4f554_row1_col0\" class=\"data row1 col0\" >2020-04-06</td>\n      <td id=\"T_4f554_row1_col1\" class=\"data row1 col1\" >Jordan</td>\n      <td id=\"T_4f554_row1_col2\" class=\"data row1 col2\" >JOR</td>\n      <td id=\"T_4f554_row1_col3\" class=\"data row1 col3\" >22</td>\n      <td id=\"T_4f554_row1_col4\" class=\"data row1 col4\" >0</td>\n      <td id=\"T_4f554_row1_col5\" class=\"data row1 col5\" >345</td>\n      <td id=\"T_4f554_row1_col6\" class=\"data row1 col6\" >5</td>\n      <td id=\"T_4f554_row1_col7\" class=\"data row1 col7\" >13</td>\n      <td id=\"T_4f554_row1_col8\" class=\"data row1 col8\" >Jordan</td>\n    </tr>\n    <tr>\n      <th id=\"T_4f554_level0_row2\" class=\"row_heading level0 row2\" >2118</th>\n      <td id=\"T_4f554_row2_col0\" class=\"data row2 col0\" >2020-04-06</td>\n      <td id=\"T_4f554_row2_col1\" class=\"data row2 col1\" >Denmark</td>\n      <td id=\"T_4f554_row2_col2\" class=\"data row2 col2\" >DNK</td>\n      <td id=\"T_4f554_row2_col3\" class=\"data row2 col3\" >292</td>\n      <td id=\"T_4f554_row2_col4\" class=\"data row2 col4\" >18</td>\n      <td id=\"T_4f554_row2_col5\" class=\"data row2 col5\" >4369</td>\n      <td id=\"T_4f554_row2_col6\" class=\"data row2 col6\" >179</td>\n      <td id=\"T_4f554_row2_col7\" class=\"data row2 col7\" >27</td>\n      <td id=\"T_4f554_row2_col8\" class=\"data row2 col8\" >Denmark</td>\n    </tr>\n    <tr>\n      <th id=\"T_4f554_level0_row3\" class=\"row_heading level0 row3\" >2119</th>\n      <td id=\"T_4f554_row3_col0\" class=\"data row3 col0\" >2020-04-06</td>\n      <td id=\"T_4f554_row3_col1\" class=\"data row3 col1\" >Dominican Republic</td>\n      <td id=\"T_4f554_row3_col2\" class=\"data row3 col2\" >DOM</td>\n      <td id=\"T_4f554_row3_col3\" class=\"data row3 col3\" >167</td>\n      <td id=\"T_4f554_row3_col4\" class=\"data row3 col4\" >5</td>\n      <td id=\"T_4f554_row3_col5\" class=\"data row3 col5\" >1745</td>\n      <td id=\"T_4f554_row3_col6\" class=\"data row3 col6\" >82</td>\n      <td id=\"T_4f554_row3_col7\" class=\"data row3 col7\" >15</td>\n      <td id=\"T_4f554_row3_col8\" class=\"data row3 col8\" >Dominican Republic</td>\n    </tr>\n    <tr>\n      <th id=\"T_4f554_level0_row4\" class=\"row_heading level0 row4\" >2120</th>\n      <td id=\"T_4f554_row4_col0\" class=\"data row4 col0\" >2020-04-06</td>\n      <td id=\"T_4f554_row4_col1\" class=\"data row4 col1\" >Ecuador</td>\n      <td id=\"T_4f554_row4_col2\" class=\"data row4 col2\" >ECU</td>\n      <td id=\"T_4f554_row4_col3\" class=\"data row4 col3\" >181</td>\n      <td id=\"T_4f554_row4_col4\" class=\"data row4 col4\" >8</td>\n      <td id=\"T_4f554_row4_col5\" class=\"data row4 col5\" >3646</td>\n      <td id=\"T_4f554_row4_col6\" class=\"data row4 col6\" >180</td>\n      <td id=\"T_4f554_row4_col7\" class=\"data row4 col7\" >19</td>\n      <td id=\"T_4f554_row4_col8\" class=\"data row4 col8\" >Ecuador</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nNext, we subset our data so it contains the top 50 cumulative cases as of April 6th (df_50) and pivot them into a 'wide' format. The index of the dataframes will be the days_elapsed variable (x-axis) and the columns will contain cumulative cases for each country (y-axis, presented on log10 scale). \n\nFor ggplot and seaborn, these country columns would be their own variable to determine the facets of the plot. This makes creating the grid of a facet plot much simpler (one line of code). \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n## Countries - top 50 cumulative cases as of 2020-03-27\n## We will use this to create a dataset with only the top 50 countries\n## that we will highlight in all the subplots\ntop_50 = data.loc[data.groupby([\"cname\"])[\"cu_cases\"].idxmax()]\\\n\t\t\t .sort_values('cu_cases', ascending = False)\\\n\t\t\t .head(50)\\\n\t\t\t .loc[:, ['iso3', 'cname', 'cu_cases']]\n\n## Filter countries in top 50\n_df = data.loc[data['iso3'].isin(top_50['iso3'])]\\\n\n## Restructure data into wide format\n## Top 50\ndf_50 = _df.pivot(index = 'days_elapsed', \n\t\t\t      values = 'cu_cases',\n\t\t\t      columns = 'cname')\\\n\t\t  .reset_index(inplace=False)\n\n# Days elapsed as index (x axis)\ndf_50.index = df_50['days_elapsed']\n\n# Drop unwanted columns\n#df = df.drop('days_elapsed', axis = 1)\ndf_50 = df_50.drop('days_elapsed', axis = 1)\n\n# Display one of the dataframes\ndf_50.head().style\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_151a2\">\n  <thead>\n    <tr>\n      <th class=\"index_name level0\" >cname</th>\n      <th id=\"T_151a2_level0_col0\" class=\"col_heading level0 col0\" >Algeria</th>\n      <th id=\"T_151a2_level0_col1\" class=\"col_heading level0 col1\" >Argentina</th>\n      <th id=\"T_151a2_level0_col2\" class=\"col_heading level0 col2\" >Australia</th>\n      <th id=\"T_151a2_level0_col3\" class=\"col_heading level0 col3\" >Austria</th>\n      <th id=\"T_151a2_level0_col4\" class=\"col_heading level0 col4\" >Belgium</th>\n      <th id=\"T_151a2_level0_col5\" class=\"col_heading level0 col5\" >Brazil</th>\n      <th id=\"T_151a2_level0_col6\" class=\"col_heading level0 col6\" >Canada</th>\n      <th id=\"T_151a2_level0_col7\" class=\"col_heading level0 col7\" >Chile</th>\n      <th id=\"T_151a2_level0_col8\" class=\"col_heading level0 col8\" >China</th>\n      <th id=\"T_151a2_level0_col9\" class=\"col_heading level0 col9\" >Colombia</th>\n      <th id=\"T_151a2_level0_col10\" class=\"col_heading level0 col10\" >Czech Republic</th>\n      <th id=\"T_151a2_level0_col11\" class=\"col_heading level0 col11\" >Denmark</th>\n      <th id=\"T_151a2_level0_col12\" class=\"col_heading level0 col12\" >Dominican Republic</th>\n      <th id=\"T_151a2_level0_col13\" class=\"col_heading level0 col13\" >Ecuador</th>\n      <th id=\"T_151a2_level0_col14\" class=\"col_heading level0 col14\" >Finland</th>\n      <th id=\"T_151a2_level0_col15\" class=\"col_heading level0 col15\" >France</th>\n      <th id=\"T_151a2_level0_col16\" class=\"col_heading level0 col16\" >Germany</th>\n      <th id=\"T_151a2_level0_col17\" class=\"col_heading level0 col17\" >Iceland</th>\n      <th id=\"T_151a2_level0_col18\" class=\"col_heading level0 col18\" >India</th>\n      <th id=\"T_151a2_level0_col19\" class=\"col_heading level0 col19\" >Indonesia</th>\n      <th id=\"T_151a2_level0_col20\" class=\"col_heading level0 col20\" >Iran</th>\n      <th id=\"T_151a2_level0_col21\" class=\"col_heading level0 col21\" >Ireland</th>\n      <th id=\"T_151a2_level0_col22\" class=\"col_heading level0 col22\" >Israel</th>\n      <th id=\"T_151a2_level0_col23\" class=\"col_heading level0 col23\" >Italy</th>\n      <th id=\"T_151a2_level0_col24\" class=\"col_heading level0 col24\" >Japan</th>\n      <th id=\"T_151a2_level0_col25\" class=\"col_heading level0 col25\" >Luxembourg</th>\n      <th id=\"T_151a2_level0_col26\" class=\"col_heading level0 col26\" >Malaysia</th>\n      <th id=\"T_151a2_level0_col27\" class=\"col_heading level0 col27\" >Mexico</th>\n      <th id=\"T_151a2_level0_col28\" class=\"col_heading level0 col28\" >Netherlands</th>\n      <th id=\"T_151a2_level0_col29\" class=\"col_heading level0 col29\" >Norway</th>\n      <th id=\"T_151a2_level0_col30\" class=\"col_heading level0 col30\" >Pakistan</th>\n      <th id=\"T_151a2_level0_col31\" class=\"col_heading level0 col31\" >Panama</th>\n      <th id=\"T_151a2_level0_col32\" class=\"col_heading level0 col32\" >Peru</th>\n      <th id=\"T_151a2_level0_col33\" class=\"col_heading level0 col33\" >Philippines</th>\n      <th id=\"T_151a2_level0_col34\" class=\"col_heading level0 col34\" >Poland</th>\n      <th id=\"T_151a2_level0_col35\" class=\"col_heading level0 col35\" >Portugal</th>\n      <th id=\"T_151a2_level0_col36\" class=\"col_heading level0 col36\" >Qatar</th>\n      <th id=\"T_151a2_level0_col37\" class=\"col_heading level0 col37\" >Romania</th>\n      <th id=\"T_151a2_level0_col38\" class=\"col_heading level0 col38\" >Russian Federation</th>\n      <th id=\"T_151a2_level0_col39\" class=\"col_heading level0 col39\" >Saudi Arabia</th>\n      <th id=\"T_151a2_level0_col40\" class=\"col_heading level0 col40\" >Serbia</th>\n      <th id=\"T_151a2_level0_col41\" class=\"col_heading level0 col41\" >South Africa</th>\n      <th id=\"T_151a2_level0_col42\" class=\"col_heading level0 col42\" >South Korea</th>\n      <th id=\"T_151a2_level0_col43\" class=\"col_heading level0 col43\" >Spain</th>\n      <th id=\"T_151a2_level0_col44\" class=\"col_heading level0 col44\" >Sweden</th>\n      <th id=\"T_151a2_level0_col45\" class=\"col_heading level0 col45\" >Switzerland</th>\n      <th id=\"T_151a2_level0_col46\" class=\"col_heading level0 col46\" >Thailand</th>\n      <th id=\"T_151a2_level0_col47\" class=\"col_heading level0 col47\" >Turkey</th>\n      <th id=\"T_151a2_level0_col48\" class=\"col_heading level0 col48\" >USA</th>\n      <th id=\"T_151a2_level0_col49\" class=\"col_heading level0 col49\" >United Arab Emirates</th>\n    </tr>\n    <tr>\n      <th class=\"index_name level0\" >days_elapsed</th>\n      <th class=\"blank col0\" >&nbsp;</th>\n      <th class=\"blank col1\" >&nbsp;</th>\n      <th class=\"blank col2\" >&nbsp;</th>\n      <th class=\"blank col3\" >&nbsp;</th>\n      <th class=\"blank col4\" >&nbsp;</th>\n      <th class=\"blank col5\" >&nbsp;</th>\n      <th class=\"blank col6\" >&nbsp;</th>\n      <th class=\"blank col7\" >&nbsp;</th>\n      <th class=\"blank col8\" >&nbsp;</th>\n      <th class=\"blank col9\" >&nbsp;</th>\n      <th class=\"blank col10\" >&nbsp;</th>\n      <th class=\"blank col11\" >&nbsp;</th>\n      <th class=\"blank col12\" >&nbsp;</th>\n      <th class=\"blank col13\" >&nbsp;</th>\n      <th class=\"blank col14\" >&nbsp;</th>\n      <th class=\"blank col15\" >&nbsp;</th>\n      <th class=\"blank col16\" >&nbsp;</th>\n      <th class=\"blank col17\" >&nbsp;</th>\n      <th class=\"blank col18\" >&nbsp;</th>\n      <th class=\"blank col19\" >&nbsp;</th>\n      <th class=\"blank col20\" >&nbsp;</th>\n      <th class=\"blank col21\" >&nbsp;</th>\n      <th class=\"blank col22\" >&nbsp;</th>\n      <th class=\"blank col23\" >&nbsp;</th>\n      <th class=\"blank col24\" >&nbsp;</th>\n      <th class=\"blank col25\" >&nbsp;</th>\n      <th class=\"blank col26\" >&nbsp;</th>\n      <th class=\"blank col27\" >&nbsp;</th>\n      <th class=\"blank col28\" >&nbsp;</th>\n      <th class=\"blank col29\" >&nbsp;</th>\n      <th class=\"blank col30\" >&nbsp;</th>\n      <th class=\"blank col31\" >&nbsp;</th>\n      <th class=\"blank col32\" >&nbsp;</th>\n      <th class=\"blank col33\" >&nbsp;</th>\n      <th class=\"blank col34\" >&nbsp;</th>\n      <th class=\"blank col35\" >&nbsp;</th>\n      <th class=\"blank col36\" >&nbsp;</th>\n      <th class=\"blank col37\" >&nbsp;</th>\n      <th class=\"blank col38\" >&nbsp;</th>\n      <th class=\"blank col39\" >&nbsp;</th>\n      <th class=\"blank col40\" >&nbsp;</th>\n      <th class=\"blank col41\" >&nbsp;</th>\n      <th class=\"blank col42\" >&nbsp;</th>\n      <th class=\"blank col43\" >&nbsp;</th>\n      <th class=\"blank col44\" >&nbsp;</th>\n      <th class=\"blank col45\" >&nbsp;</th>\n      <th class=\"blank col46\" >&nbsp;</th>\n      <th class=\"blank col47\" >&nbsp;</th>\n      <th class=\"blank col48\" >&nbsp;</th>\n      <th class=\"blank col49\" >&nbsp;</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_151a2_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_151a2_row0_col0\" class=\"data row0 col0\" >102.000000</td>\n      <td id=\"T_151a2_row0_col1\" class=\"data row0 col1\" >128.000000</td>\n      <td id=\"T_151a2_row0_col2\" class=\"data row0 col2\" >100.000000</td>\n      <td id=\"T_151a2_row0_col3\" class=\"data row0 col3\" >102.000000</td>\n      <td id=\"T_151a2_row0_col4\" class=\"data row0 col4\" >109.000000</td>\n      <td id=\"T_151a2_row0_col5\" class=\"data row0 col5\" >121.000000</td>\n      <td id=\"T_151a2_row0_col6\" class=\"data row0 col6\" >103.000000</td>\n      <td id=\"T_151a2_row0_col7\" class=\"data row0 col7\" >156.000000</td>\n      <td id=\"T_151a2_row0_col8\" class=\"data row0 col8\" >216.000000</td>\n      <td id=\"T_151a2_row0_col9\" class=\"data row0 col9\" >102.000000</td>\n      <td id=\"T_151a2_row0_col10\" class=\"data row0 col10\" >116.000000</td>\n      <td id=\"T_151a2_row0_col11\" class=\"data row0 col11\" >113.000000</td>\n      <td id=\"T_151a2_row0_col12\" class=\"data row0 col12\" >112.000000</td>\n      <td id=\"T_151a2_row0_col13\" class=\"data row0 col13\" >111.000000</td>\n      <td id=\"T_151a2_row0_col14\" class=\"data row0 col14\" >155.000000</td>\n      <td id=\"T_151a2_row0_col15\" class=\"data row0 col15\" >100.000000</td>\n      <td id=\"T_151a2_row0_col16\" class=\"data row0 col16\" >111.000000</td>\n      <td id=\"T_151a2_row0_col17\" class=\"data row0 col17\" >117.000000</td>\n      <td id=\"T_151a2_row0_col18\" class=\"data row0 col18\" >125.000000</td>\n      <td id=\"T_151a2_row0_col19\" class=\"data row0 col19\" >117.000000</td>\n      <td id=\"T_151a2_row0_col20\" class=\"data row0 col20\" >139.000000</td>\n      <td id=\"T_151a2_row0_col21\" class=\"data row0 col21\" >129.000000</td>\n      <td id=\"T_151a2_row0_col22\" class=\"data row0 col22\" >116.000000</td>\n      <td id=\"T_151a2_row0_col23\" class=\"data row0 col23\" >132.000000</td>\n      <td id=\"T_151a2_row0_col24\" class=\"data row0 col24\" >105.000000</td>\n      <td id=\"T_151a2_row0_col25\" class=\"data row0 col25\" >140.000000</td>\n      <td id=\"T_151a2_row0_col26\" class=\"data row0 col26\" >117.000000</td>\n      <td id=\"T_151a2_row0_col27\" class=\"data row0 col27\" >118.000000</td>\n      <td id=\"T_151a2_row0_col28\" class=\"data row0 col28\" >128.000000</td>\n      <td id=\"T_151a2_row0_col29\" class=\"data row0 col29\" >113.000000</td>\n      <td id=\"T_151a2_row0_col30\" class=\"data row0 col30\" >187.000000</td>\n      <td id=\"T_151a2_row0_col31\" class=\"data row0 col31\" >109.000000</td>\n      <td id=\"T_151a2_row0_col32\" class=\"data row0 col32\" >117.000000</td>\n      <td id=\"T_151a2_row0_col33\" class=\"data row0 col33\" >111.000000</td>\n      <td id=\"T_151a2_row0_col34\" class=\"data row0 col34\" >104.000000</td>\n      <td id=\"T_151a2_row0_col35\" class=\"data row0 col35\" >112.000000</td>\n      <td id=\"T_151a2_row0_col36\" class=\"data row0 col36\" >262.000000</td>\n      <td id=\"T_151a2_row0_col37\" class=\"data row0 col37\" >113.000000</td>\n      <td id=\"T_151a2_row0_col38\" class=\"data row0 col38\" >114.000000</td>\n      <td id=\"T_151a2_row0_col39\" class=\"data row0 col39\" >118.000000</td>\n      <td id=\"T_151a2_row0_col40\" class=\"data row0 col40\" >126.000000</td>\n      <td id=\"T_151a2_row0_col41\" class=\"data row0 col41\" >116.000000</td>\n      <td id=\"T_151a2_row0_col42\" class=\"data row0 col42\" >155.000000</td>\n      <td id=\"T_151a2_row0_col43\" class=\"data row0 col43\" >114.000000</td>\n      <td id=\"T_151a2_row0_col44\" class=\"data row0 col44\" >137.000000</td>\n      <td id=\"T_151a2_row0_col45\" class=\"data row0 col45\" >209.000000</td>\n      <td id=\"T_151a2_row0_col46\" class=\"data row0 col46\" >114.000000</td>\n      <td id=\"T_151a2_row0_col47\" class=\"data row0 col47\" >191.000000</td>\n      <td id=\"T_151a2_row0_col48\" class=\"data row0 col48\" >103.000000</td>\n      <td id=\"T_151a2_row0_col49\" class=\"data row0 col49\" >113.000000</td>\n    </tr>\n    <tr>\n      <th id=\"T_151a2_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_151a2_row1_col0\" class=\"data row1 col0\" >189.000000</td>\n      <td id=\"T_151a2_row1_col1\" class=\"data row1 col1\" >158.000000</td>\n      <td id=\"T_151a2_row1_col2\" class=\"data row1 col2\" >112.000000</td>\n      <td id=\"T_151a2_row1_col3\" class=\"data row1 col3\" >131.000000</td>\n      <td id=\"T_151a2_row1_col4\" class=\"data row1 col4\" >169.000000</td>\n      <td id=\"T_151a2_row1_col5\" class=\"data row1 col5\" >200.000000</td>\n      <td id=\"T_151a2_row1_col6\" class=\"data row1 col6\" >138.000000</td>\n      <td id=\"T_151a2_row1_col7\" class=\"data row1 col7\" >201.000000</td>\n      <td id=\"T_151a2_row1_col8\" class=\"data row1 col8\" >235.000000</td>\n      <td id=\"T_151a2_row1_col9\" class=\"data row1 col9\" >128.000000</td>\n      <td id=\"T_151a2_row1_col10\" class=\"data row1 col10\" >150.000000</td>\n      <td id=\"T_151a2_row1_col11\" class=\"data row1 col11\" >264.000000</td>\n      <td id=\"T_151a2_row1_col12\" class=\"data row1 col12\" >202.000000</td>\n      <td id=\"T_151a2_row1_col13\" class=\"data row1 col13\" >168.000000</td>\n      <td id=\"T_151a2_row1_col14\" class=\"data row1 col14\" >nan</td>\n      <td id=\"T_151a2_row1_col15\" class=\"data row1 col15\" >130.000000</td>\n      <td id=\"T_151a2_row1_col16\" class=\"data row1 col16\" >129.000000</td>\n      <td id=\"T_151a2_row1_col17\" class=\"data row1 col17\" >117.000000</td>\n      <td id=\"T_151a2_row1_col18\" class=\"data row1 col18\" >137.000000</td>\n      <td id=\"T_151a2_row1_col19\" class=\"data row1 col19\" >134.000000</td>\n      <td id=\"T_151a2_row1_col20\" class=\"data row1 col20\" >245.000000</td>\n      <td id=\"T_151a2_row1_col21\" class=\"data row1 col21\" >169.000000</td>\n      <td id=\"T_151a2_row1_col22\" class=\"data row1 col22\" >178.000000</td>\n      <td id=\"T_151a2_row1_col23\" class=\"data row1 col23\" >229.000000</td>\n      <td id=\"T_151a2_row1_col24\" class=\"data row1 col24\" >132.000000</td>\n      <td id=\"T_151a2_row1_col25\" class=\"data row1 col25\" >210.000000</td>\n      <td id=\"T_151a2_row1_col26\" class=\"data row1 col26\" >129.000000</td>\n      <td id=\"T_151a2_row1_col27\" class=\"data row1 col27\" >164.000000</td>\n      <td id=\"T_151a2_row1_col28\" class=\"data row1 col28\" >188.000000</td>\n      <td id=\"T_151a2_row1_col29\" class=\"data row1 col29\" >147.000000</td>\n      <td id=\"T_151a2_row1_col30\" class=\"data row1 col30\" >187.000000</td>\n      <td id=\"T_151a2_row1_col31\" class=\"data row1 col31\" >137.000000</td>\n      <td id=\"T_151a2_row1_col32\" class=\"data row1 col32\" >145.000000</td>\n      <td id=\"T_151a2_row1_col33\" class=\"data row1 col33\" >140.000000</td>\n      <td id=\"T_151a2_row1_col34\" class=\"data row1 col34\" >125.000000</td>\n      <td id=\"T_151a2_row1_col35\" class=\"data row1 col35\" >169.000000</td>\n      <td id=\"T_151a2_row1_col36\" class=\"data row1 col36\" >nan</td>\n      <td id=\"T_151a2_row1_col37\" class=\"data row1 col37\" >139.000000</td>\n      <td id=\"T_151a2_row1_col38\" class=\"data row1 col38\" >147.000000</td>\n      <td id=\"T_151a2_row1_col39\" class=\"data row1 col39\" >133.000000</td>\n      <td id=\"T_151a2_row1_col40\" class=\"data row1 col40\" >135.000000</td>\n      <td id=\"T_151a2_row1_col41\" class=\"data row1 col41\" >150.000000</td>\n      <td id=\"T_151a2_row1_col42\" class=\"data row1 col42\" >345.000000</td>\n      <td id=\"T_151a2_row1_col43\" class=\"data row1 col43\" >151.000000</td>\n      <td id=\"T_151a2_row1_col44\" class=\"data row1 col44\" >161.000000</td>\n      <td id=\"T_151a2_row1_col45\" class=\"data row1 col45\" >264.000000</td>\n      <td id=\"T_151a2_row1_col46\" class=\"data row1 col46\" >177.000000</td>\n      <td id=\"T_151a2_row1_col47\" class=\"data row1 col47\" >359.000000</td>\n      <td id=\"T_151a2_row1_col48\" class=\"data row1 col48\" >125.000000</td>\n      <td id=\"T_151a2_row1_col49\" class=\"data row1 col49\" >113.000000</td>\n    </tr>\n    <tr>\n      <th id=\"T_151a2_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_151a2_row2_col0\" class=\"data row2 col0\" >231.000000</td>\n      <td id=\"T_151a2_row2_col1\" class=\"data row2 col1\" >225.000000</td>\n      <td id=\"T_151a2_row2_col2\" class=\"data row2 col2\" >126.000000</td>\n      <td id=\"T_151a2_row2_col3\" class=\"data row2 col3\" >182.000000</td>\n      <td id=\"T_151a2_row2_col4\" class=\"data row2 col4\" >200.000000</td>\n      <td id=\"T_151a2_row2_col5\" class=\"data row2 col5\" >234.000000</td>\n      <td id=\"T_151a2_row2_col6\" class=\"data row2 col6\" >176.000000</td>\n      <td id=\"T_151a2_row2_col7\" class=\"data row2 col7\" >238.000000</td>\n      <td id=\"T_151a2_row2_col8\" class=\"data row2 col8\" >386.000000</td>\n      <td id=\"T_151a2_row2_col9\" class=\"data row2 col9\" >158.000000</td>\n      <td id=\"T_151a2_row2_col10\" class=\"data row2 col10\" >214.000000</td>\n      <td id=\"T_151a2_row2_col11\" class=\"data row2 col11\" >516.000000</td>\n      <td id=\"T_151a2_row2_col12\" class=\"data row2 col12\" >245.000000</td>\n      <td id=\"T_151a2_row2_col13\" class=\"data row2 col13\" >199.000000</td>\n      <td id=\"T_151a2_row2_col14\" class=\"data row2 col14\" >210.000000</td>\n      <td id=\"T_151a2_row2_col15\" class=\"data row2 col15\" >178.000000</td>\n      <td id=\"T_151a2_row2_col16\" class=\"data row2 col16\" >157.000000</td>\n      <td id=\"T_151a2_row2_col17\" class=\"data row2 col17\" >138.000000</td>\n      <td id=\"T_151a2_row2_col18\" class=\"data row2 col18\" >165.000000</td>\n      <td id=\"T_151a2_row2_col19\" class=\"data row2 col19\" >172.000000</td>\n      <td id=\"T_151a2_row2_col20\" class=\"data row2 col20\" >388.000000</td>\n      <td id=\"T_151a2_row2_col21\" class=\"data row2 col21\" >223.000000</td>\n      <td id=\"T_151a2_row2_col22\" class=\"data row2 col22\" >250.000000</td>\n      <td id=\"T_151a2_row2_col23\" class=\"data row2 col23\" >322.000000</td>\n      <td id=\"T_151a2_row2_col24\" class=\"data row2 col24\" >144.000000</td>\n      <td id=\"T_151a2_row2_col25\" class=\"data row2 col25\" >345.000000</td>\n      <td id=\"T_151a2_row2_col26\" class=\"data row2 col26\" >149.000000</td>\n      <td id=\"T_151a2_row2_col27\" class=\"data row2 col27\" >203.000000</td>\n      <td id=\"T_151a2_row2_col28\" class=\"data row2 col28\" >265.000000</td>\n      <td id=\"T_151a2_row2_col29\" class=\"data row2 col29\" >169.000000</td>\n      <td id=\"T_151a2_row2_col30\" class=\"data row2 col30\" >302.000000</td>\n      <td id=\"T_151a2_row2_col31\" class=\"data row2 col31\" >200.000000</td>\n      <td id=\"T_151a2_row2_col32\" class=\"data row2 col32\" >234.000000</td>\n      <td id=\"T_151a2_row2_col33\" class=\"data row2 col33\" >142.000000</td>\n      <td id=\"T_151a2_row2_col34\" class=\"data row2 col34\" >177.000000</td>\n      <td id=\"T_151a2_row2_col35\" class=\"data row2 col35\" >245.000000</td>\n      <td id=\"T_151a2_row2_col36\" class=\"data row2 col36\" >320.000000</td>\n      <td id=\"T_151a2_row2_col37\" class=\"data row2 col37\" >184.000000</td>\n      <td id=\"T_151a2_row2_col38\" class=\"data row2 col38\" >199.000000</td>\n      <td id=\"T_151a2_row2_col39\" class=\"data row2 col39\" >133.000000</td>\n      <td id=\"T_151a2_row2_col40\" class=\"data row2 col40\" >149.000000</td>\n      <td id=\"T_151a2_row2_col41\" class=\"data row2 col41\" >205.000000</td>\n      <td id=\"T_151a2_row2_col42\" class=\"data row2 col42\" >601.000000</td>\n      <td id=\"T_151a2_row2_col43\" class=\"data row2 col43\" >200.000000</td>\n      <td id=\"T_151a2_row2_col44\" class=\"data row2 col44\" >203.000000</td>\n      <td id=\"T_151a2_row2_col45\" class=\"data row2 col45\" >332.000000</td>\n      <td id=\"T_151a2_row2_col46\" class=\"data row2 col46\" >177.000000</td>\n      <td id=\"T_151a2_row2_col47\" class=\"data row2 col47\" >670.000000</td>\n      <td id=\"T_151a2_row2_col48\" class=\"data row2 col48\" >159.000000</td>\n      <td id=\"T_151a2_row2_col49\" class=\"data row2 col49\" >140.000000</td>\n    </tr>\n    <tr>\n      <th id=\"T_151a2_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_151a2_row3_col0\" class=\"data row3 col0\" >264.000000</td>\n      <td id=\"T_151a2_row3_col1\" class=\"data row3 col1\" >266.000000</td>\n      <td id=\"T_151a2_row3_col2\" class=\"data row3 col2\" >156.000000</td>\n      <td id=\"T_151a2_row3_col3\" class=\"data row3 col3\" >246.000000</td>\n      <td id=\"T_151a2_row3_col4\" class=\"data row3 col4\" >239.000000</td>\n      <td id=\"T_151a2_row3_col5\" class=\"data row3 col5\" >291.000000</td>\n      <td id=\"T_151a2_row3_col6\" class=\"data row3 col6\" >244.000000</td>\n      <td id=\"T_151a2_row3_col7\" class=\"data row3 col7\" >342.000000</td>\n      <td id=\"T_151a2_row3_col8\" class=\"data row3 col8\" >526.000000</td>\n      <td id=\"T_151a2_row3_col9\" class=\"data row3 col9\" >210.000000</td>\n      <td id=\"T_151a2_row3_col10\" class=\"data row3 col10\" >298.000000</td>\n      <td id=\"T_151a2_row3_col11\" class=\"data row3 col11\" >676.000000</td>\n      <td id=\"T_151a2_row3_col12\" class=\"data row3 col12\" >312.000000</td>\n      <td id=\"T_151a2_row3_col13\" class=\"data row3 col13\" >426.000000</td>\n      <td id=\"T_151a2_row3_col14\" class=\"data row3 col14\" >267.000000</td>\n      <td id=\"T_151a2_row3_col15\" class=\"data row3 col15\" >212.000000</td>\n      <td id=\"T_151a2_row3_col16\" class=\"data row3 col16\" >196.000000</td>\n      <td id=\"T_151a2_row3_col17\" class=\"data row3 col17\" >178.000000</td>\n      <td id=\"T_151a2_row3_col18\" class=\"data row3 col18\" >191.000000</td>\n      <td id=\"T_151a2_row3_col19\" class=\"data row3 col19\" >172.000000</td>\n      <td id=\"T_151a2_row3_col20\" class=\"data row3 col20\" >593.000000</td>\n      <td id=\"T_151a2_row3_col21\" class=\"data row3 col21\" >292.000000</td>\n      <td id=\"T_151a2_row3_col22\" class=\"data row3 col22\" >260.000000</td>\n      <td id=\"T_151a2_row3_col23\" class=\"data row3 col23\" >400.000000</td>\n      <td id=\"T_151a2_row3_col24\" class=\"data row3 col24\" >144.000000</td>\n      <td id=\"T_151a2_row3_col25\" class=\"data row3 col25\" >484.000000</td>\n      <td id=\"T_151a2_row3_col26\" class=\"data row3 col26\" >158.000000</td>\n      <td id=\"T_151a2_row3_col27\" class=\"data row3 col27\" >251.000000</td>\n      <td id=\"T_151a2_row3_col28\" class=\"data row3 col28\" >321.000000</td>\n      <td id=\"T_151a2_row3_col29\" class=\"data row3 col29\" >192.000000</td>\n      <td id=\"T_151a2_row3_col30\" class=\"data row3 col30\" >478.000000</td>\n      <td id=\"T_151a2_row3_col31\" class=\"data row3 col31\" >245.000000</td>\n      <td id=\"T_151a2_row3_col32\" class=\"data row3 col32\" >263.000000</td>\n      <td id=\"T_151a2_row3_col33\" class=\"data row3 col33\" >187.000000</td>\n      <td id=\"T_151a2_row3_col34\" class=\"data row3 col34\" >238.000000</td>\n      <td id=\"T_151a2_row3_col35\" class=\"data row3 col35\" >331.000000</td>\n      <td id=\"T_151a2_row3_col36\" class=\"data row3 col36\" >337.000000</td>\n      <td id=\"T_151a2_row3_col37\" class=\"data row3 col37\" >217.000000</td>\n      <td id=\"T_151a2_row3_col38\" class=\"data row3 col38\" >253.000000</td>\n      <td id=\"T_151a2_row3_col39\" class=\"data row3 col39\" >171.000000</td>\n      <td id=\"T_151a2_row3_col40\" class=\"data row3 col40\" >188.000000</td>\n      <td id=\"T_151a2_row3_col41\" class=\"data row3 col41\" >240.000000</td>\n      <td id=\"T_151a2_row3_col42\" class=\"data row3 col42\" >762.000000</td>\n      <td id=\"T_151a2_row3_col43\" class=\"data row3 col43\" >261.000000</td>\n      <td id=\"T_151a2_row3_col44\" class=\"data row3 col44\" >248.000000</td>\n      <td id=\"T_151a2_row3_col45\" class=\"data row3 col45\" >374.000000</td>\n      <td id=\"T_151a2_row3_col46\" class=\"data row3 col46\" >177.000000</td>\n      <td id=\"T_151a2_row3_col47\" class=\"data row3 col47\" >947.000000</td>\n      <td id=\"T_151a2_row3_col48\" class=\"data row3 col48\" >233.000000</td>\n      <td id=\"T_151a2_row3_col49\" class=\"data row3 col49\" >140.000000</td>\n    </tr>\n    <tr>\n      <th id=\"T_151a2_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_151a2_row4_col0\" class=\"data row4 col0\" >305.000000</td>\n      <td id=\"T_151a2_row4_col1\" class=\"data row4 col1\" >301.000000</td>\n      <td id=\"T_151a2_row4_col2\" class=\"data row4 col2\" >197.000000</td>\n      <td id=\"T_151a2_row4_col3\" class=\"data row4 col3\" >361.000000</td>\n      <td id=\"T_151a2_row4_col4\" class=\"data row4 col4\" >267.000000</td>\n      <td id=\"T_151a2_row4_col5\" class=\"data row4 col5\" >428.000000</td>\n      <td id=\"T_151a2_row4_col6\" class=\"data row4 col6\" >304.000000</td>\n      <td id=\"T_151a2_row4_col7\" class=\"data row4 col7\" >434.000000</td>\n      <td id=\"T_151a2_row4_col8\" class=\"data row4 col8\" >623.000000</td>\n      <td id=\"T_151a2_row4_col9\" class=\"data row4 col9\" >235.000000</td>\n      <td id=\"T_151a2_row4_col10\" class=\"data row4 col10\" >344.000000</td>\n      <td id=\"T_151a2_row4_col11\" class=\"data row4 col11\" >804.000000</td>\n      <td id=\"T_151a2_row4_col12\" class=\"data row4 col12\" >392.000000</td>\n      <td id=\"T_151a2_row4_col13\" class=\"data row4 col13\" >532.000000</td>\n      <td id=\"T_151a2_row4_col14\" class=\"data row4 col14\" >272.000000</td>\n      <td id=\"T_151a2_row4_col15\" class=\"data row4 col15\" >285.000000</td>\n      <td id=\"T_151a2_row4_col16\" class=\"data row4 col16\" >262.000000</td>\n      <td id=\"T_151a2_row4_col17\" class=\"data row4 col17\" >199.000000</td>\n      <td id=\"T_151a2_row4_col18\" class=\"data row4 col18\" >231.000000</td>\n      <td id=\"T_151a2_row4_col19\" class=\"data row4 col19\" >227.000000</td>\n      <td id=\"T_151a2_row4_col20\" class=\"data row4 col20\" >978.000000</td>\n      <td id=\"T_151a2_row4_col21\" class=\"data row4 col21\" >366.000000</td>\n      <td id=\"T_151a2_row4_col22\" class=\"data row4 col22\" >427.000000</td>\n      <td id=\"T_151a2_row4_col23\" class=\"data row4 col23\" >650.000000</td>\n      <td id=\"T_151a2_row4_col24\" class=\"data row4 col24\" >164.000000</td>\n      <td id=\"T_151a2_row4_col25\" class=\"data row4 col25\" >670.000000</td>\n      <td id=\"T_151a2_row4_col26\" class=\"data row4 col26\" >197.000000</td>\n      <td id=\"T_151a2_row4_col27\" class=\"data row4 col27\" >316.000000</td>\n      <td id=\"T_151a2_row4_col28\" class=\"data row4 col28\" >382.000000</td>\n      <td id=\"T_151a2_row4_col29\" class=\"data row4 col29\" >277.000000</td>\n      <td id=\"T_151a2_row4_col30\" class=\"data row4 col30\" >495.000000</td>\n      <td id=\"T_151a2_row4_col31\" class=\"data row4 col31\" >313.000000</td>\n      <td id=\"T_151a2_row4_col32\" class=\"data row4 col32\" >318.000000</td>\n      <td id=\"T_151a2_row4_col33\" class=\"data row4 col33\" >202.000000</td>\n      <td id=\"T_151a2_row4_col34\" class=\"data row4 col34\" >287.000000</td>\n      <td id=\"T_151a2_row4_col35\" class=\"data row4 col35\" >448.000000</td>\n      <td id=\"T_151a2_row4_col36\" class=\"data row4 col36\" >401.000000</td>\n      <td id=\"T_151a2_row4_col37\" class=\"data row4 col37\" >260.000000</td>\n      <td id=\"T_151a2_row4_col38\" class=\"data row4 col38\" >306.000000</td>\n      <td id=\"T_151a2_row4_col39\" class=\"data row4 col39\" >238.000000</td>\n      <td id=\"T_151a2_row4_col40\" class=\"data row4 col40\" >222.000000</td>\n      <td id=\"T_151a2_row4_col41\" class=\"data row4 col41\" >274.000000</td>\n      <td id=\"T_151a2_row4_col42\" class=\"data row4 col42\" >892.000000</td>\n      <td id=\"T_151a2_row4_col43\" class=\"data row4 col43\" >374.000000</td>\n      <td id=\"T_151a2_row4_col44\" class=\"data row4 col44\" >326.000000</td>\n      <td id=\"T_151a2_row4_col45\" class=\"data row4 col45\" >490.000000</td>\n      <td id=\"T_151a2_row4_col46\" class=\"data row4 col46\" >212.000000</td>\n      <td id=\"T_151a2_row4_col47\" class=\"data row4 col47\" >1236.000000</td>\n      <td id=\"T_151a2_row4_col48\" class=\"data row4 col48\" >338.000000</td>\n      <td id=\"T_151a2_row4_col49\" class=\"data row4 col49\" >153.000000</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n## Plotting single country\nI started by plotting a single country before adding the other components of the final chart. Starting simple helped me get the basics right first. The below chart the cumulative growth of cases in China by days since the 100th case.\n\nYou can plot this using matplotlib or the plot function of the pandas dataframe. All the customisation uses matplotlib functions. The difference between using matplotlib and pandas.plot is minor in a simple plot. However, it is much easier to start off with pandas.plot then add customisation via matplotlib when it comes to more complicated visualisations (thanks to [Chris Moffitt's blog post](https://pbpython.com/effective-matplotlib.html) on effective plotting in Python for this advice).\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n## Plot China\nfig, ax = plt.subplots(figsize = (8, 13))\n\n# Matplotlib\nplt.plot(df_50.index, df_50['China'], color = 'grey')\n\n# Pandas\n# df_50['China'].plot(color='grey')\n\n# Plot customisation\nplt.title('Cumulative Growth rate of China')\nplt.xlabel('Days since 100th confirmed case')\nplt.ylabel('Cumulative number of cases (log10 scale)')\nax.set_xticks(np.arange(0, 80, 20), minor=False)\nax.set_yscale('log', base=10)\nax.yaxis.set_major_formatter(tick.ScalarFormatter())\nax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\nplt.plot();\n```\n:::\n\n\n<center>\n![](1.svg)\n</center>\n\n## Plotting all countries {.tabset .tabset-fade .tabset-pills}\nNext is to display the values of all coutries in a single figure. Matplotlib requires the code to explicitly identify which columns of the dataframe it is plotting. To do this I created a list of all countries which I loop over to plot each individual line. This will also be used to 'highlight' the relevant countries in each subplot later on. \n\nThe plot function in pandas is more forgiving. It will plot all columns for you automatically. No for loop needed.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Create list of countries to loop over\ncountries = top_50['cname'].drop_duplicates().tolist()\n\n# Print first 5 countries\ncountries[0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['USA', 'Spain', 'Italy', 'Germany', 'China']\n```\n:::\n:::\n\n\n### Pandas\n\n::: {.cell fig-height='8' execution_count=5}\n``` {.python .cell-code}\nfig, axes= plt.subplots(figsize=(5,8))\n\n# Pandas\ndf_50.plot(color='grey', alpha = 0.6, linewidth=0.5, legend = False, ax = axes)\n\n# Matplotlib customisation\nplt.title('Cumulative reported cases for all countries')\nplt.xlabel('Days since 100th confirmed case')\nplt.ylabel('Cumulative number of cases (log10 scale)')\naxes.set_xticks(np.arange(0, 80, 20), minor=False)\naxes.set_yscale('log', base=10)\naxes.grid(alpha=0.2)\naxes.yaxis.set_major_formatter(tick.ScalarFormatter())\naxes.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\nplt.plot();\n```\n:::\n\n\n<center>\n![](5.svg)\n</center>\n\n\n### Matplotlib\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nfig, axes = plt.subplots(figsize = (5, 8))\n\n# Matplotlib\nfor idx, count in enumerate(countries):\n    plt.plot(df_50.index, df_50[str(count)], color = 'grey', alpha = 0.6, linewidth=0.5)\n\n# Matplotlib Customisation\nplt.title('Cumulative reported cases for all countries')\nplt.xlabel('Days since 100th confirmed case')\nplt.ylabel('Cumulative number of cases (log10 scale)')\naxes.set_xticks(np.arange(0, 80, 20), minor=False)\naxes.set_yscale('log', base=10)\naxes.yaxis.set_major_formatter(tick.ScalarFormatter())\naxes.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\nplt.plot();\n```\n:::\n\n\n<center>\n![](2.svg)\n</center>\n\n## Plotting all countries in 50 subplots {.tabset .tabset-fade .tabset-pills}\n\nThis is where things get complicated. We need to loop over the countries list for both matplotlib and pandas to create subplots for each of the top 50 countries. This means that matplotlib has another for loop to compute all the cumulative cases as well as doing it across subplots. I spent quite a few hours trying _not_ to do this (I would've got this post out a lot earlier). \n\nBut it turns out the best way to do this is just plot the 50 countries using pandas.plot and use the for loop to plot across all subplots. I've kept my attempted matplotlib version in the tab below -- please get in touch if you know a better way of doing this.\n\n### Pandas\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfig, axes = plt.subplots(10, 5, figsize = (16, 30), sharex = True, sharey = True)\n\nfor idx, count in enumerate(countries):\n    # Get grey lines for all subplots\n\tdf_50.plot(ax = axes[idx//5][idx%5],\n                legend = False, \n                color='grey',  \n                alpha = 0.6, \n                linewidth=0.5)\n\n\taxes[idx//5][idx%5].set_title(str(count), size = 9)\n\taxes[idx//5][idx%5].set_xlabel('')\n\taxes[idx//5][idx%5].set_ylabel('')\n\taxes[idx//5][idx%5].set_yscale('log', base=10)\n\taxes[idx//5][idx%5].yaxis.set_major_formatter(tick.ScalarFormatter())\n\taxes[idx//5][idx%5].get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\taxes[idx//5][idx%5].grid(alpha=0.1)\n\taxes[idx//5][idx%5].set_xticks(np.arange(0, 80, 20), minor=False)\n    \nfig.suptitle('Cumulative Number of Reported Cases of COVID-19: Top 50 Countries', fontsize=20,\n            x=0.12, y=.91, horizontalalignment='left', verticalalignment='top')\nfig.text(0.12, 0.895, 'Date of Saturday, April 4, 2020', fontsize=16, ha='left', va='top')\nfig.text(0.04, 0.5, 'Cumulative number of cases (log10 scale)', va='center', rotation='vertical', size = 16) \nfig.text(0.5, 0.097, 'Days since 100th confirmed case', ha='center', size = 16)\nplt.figure();\n```\n:::\n\n\n### Matplotlib\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfig, axes = plt.subplots(10, 5, figsize = (16, 30), sharex = True, sharey = True)\n\nfor idx, count in enumerate(countries):\n\tfor country in enumerate(countries):\n\t\taxes[idx//5][idx%5].plot(df_50.index, df_50[str(country[1])],\n                                 color='grey',  \n                                 alpha = 0.6, \n                                 linewidth=0.5)\n   \n\t\taxes[idx//5][idx%5].title.set_text(str(count))\n\t\taxes[idx//5][idx%5].set_title(str(count), size = 9)\n\t\taxes[idx//5][idx%5].set_xlabel('')\n\t\taxes[idx//5][idx%5].set_ylabel('')\n\t\taxes[idx//5][idx%5].set_yscale('log', base=10)\n\t\taxes[idx//5][idx%5].yaxis.set_major_formatter(tick.ScalarFormatter())\n\t\taxes[idx//5][idx%5].get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\t\taxes[idx//5][idx%5].grid(alpha=0.2)\n\t\taxes[idx//5][idx%5].set_xticks(np.arange(0, 80, 20), minor=False)\n\nfig.suptitle('Cumulative Number of Reported Cases of COVID-19: Top 50 Countries', fontsize=20,\n            x=0.12, y=.91, horizontalalignment='left', verticalalignment='top')\nfig.text(0.12, 0.895, 'Date of Saturday, April 4, 2020', fontsize=16, ha='left', va='top')\nfig.text(0.04, 0.5, 'Cumulative number of cases (log10 scale)', va='center', rotation='vertical', size = 16) \nfig.text(0.5, 0.097, 'Days since 100th confirmed case', ha='center', size = 16)\n        \nplt.plot();\n```\n:::\n\n\n<center>\n![](3.svg)\n</center>\n\n## Highlighting countries and adding points\n\nFinally all that's left to do is to highlight the line corresponding to the country in the subplot and add a point for the end of each line. To do plot the points at the end of each red line, I create and loop over a dataframe which contains the top 50 countries with the corresponding latest day elapsed and cumulative case. This is completed using just pandas.plot and customised with matplotlib functions. \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Subset dataframe with top 50 countries and the latest cumulative case value\nmarkers = data.loc[data.groupby([\"cname\"])[\"cu_cases\"].idxmax()]\\\n\t\t\t .sort_values('cu_cases', ascending = False)\\\n\t\t\t .head(50)\\\n\t\t\t .loc[:, ['days_elapsed', 'cname', 'cu_cases']]\\\n\t\t\t .reset_index(drop = True)\n\nmarkers.head().style\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_e5232\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_e5232_level0_col0\" class=\"col_heading level0 col0\" >days_elapsed</th>\n      <th id=\"T_e5232_level0_col1\" class=\"col_heading level0 col1\" >cname</th>\n      <th id=\"T_e5232_level0_col2\" class=\"col_heading level0 col2\" >cu_cases</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_e5232_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_e5232_row0_col0\" class=\"data row0 col0\" >34</td>\n      <td id=\"T_e5232_row0_col1\" class=\"data row0 col1\" >USA</td>\n      <td id=\"T_e5232_row0_col2\" class=\"data row0 col2\" >337635</td>\n    </tr>\n    <tr>\n      <th id=\"T_e5232_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_e5232_row1_col0\" class=\"data row1 col0\" >34</td>\n      <td id=\"T_e5232_row1_col1\" class=\"data row1 col1\" >Spain</td>\n      <td id=\"T_e5232_row1_col2\" class=\"data row1 col2\" >130759</td>\n    </tr>\n    <tr>\n      <th id=\"T_e5232_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_e5232_row2_col0\" class=\"data row2 col0\" >42</td>\n      <td id=\"T_e5232_row2_col1\" class=\"data row2 col1\" >Italy</td>\n      <td id=\"T_e5232_row2_col2\" class=\"data row2 col2\" >128948</td>\n    </tr>\n    <tr>\n      <th id=\"T_e5232_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_e5232_row3_col0\" class=\"data row3 col0\" >36</td>\n      <td id=\"T_e5232_row3_col1\" class=\"data row3 col1\" >Germany</td>\n      <td id=\"T_e5232_row3_col2\" class=\"data row3 col2\" >95391</td>\n    </tr>\n    <tr>\n      <th id=\"T_e5232_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_e5232_row4_col0\" class=\"data row4 col0\" >78</td>\n      <td id=\"T_e5232_row4_col1\" class=\"data row4 col1\" >China</td>\n      <td id=\"T_e5232_row4_col2\" class=\"data row4 col2\" >82642</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfig, axes = plt.subplots(10, 5, figsize = (16, 30), sharex = True, sharey = True)\n\nfor idx, count in enumerate(countries):\n    # Get grey lines for all subplots\n\tdf_50.plot(ax = axes[idx//5][idx%5],\n                legend = False, \n                color='grey',  \n                alpha = 0.6, \n                linewidth=0.5)\n   \n    # Highlight relevant countries for each subplot\n\tdf_50[str(count)].plot(ax = axes[idx//5][idx%5],\n                            legend = False, \n                            color='red',\n                            linewidth=0.9)\n    \n    # Add markers at the end of each line\n\tmarkers.query('cname == \"{}\"'.format(count))\\\n           .plot.scatter(ax = axes[idx//5][idx%5],\n                         x='days_elapsed', \n                         y='cu_cases', \n                         color = 'red')\n    \n\taxes[idx//5][idx%5].set_title(str(count), size = 9)\n\taxes[idx//5][idx%5].set_xlabel('')\n\taxes[idx//5][idx%5].set_ylabel('')\n\taxes[idx//5][idx%5].set_yscale('log', base=10)\n\taxes[idx//5][idx%5].yaxis.set_major_formatter(tick.ScalarFormatter())\n\taxes[idx//5][idx%5].get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x))))\n\taxes[idx//5][idx%5].grid(alpha=0.1)\n\taxes[idx//5][idx%5].set_xticks(np.arange(0, 80, 20), minor=False)\n    \nfig.suptitle('Cumulative Number of Reported Cases of COVID-19: Top 50 Countries', fontsize=20,\n            x=0.12, y=.91, horizontalalignment='left', verticalalignment='top')\nfig.text(0.12, 0.895, 'Date of Saturday, April 4, 2020', fontsize=16, ha='left', va='top')\nfig.text(0.04, 0.5, 'Cumulative number of cases (log10 scale)', va='center', rotation='vertical', size = 16) \nfig.text(0.5, 0.097, 'Days since 100th confirmed case', ha='center', size = 16)\n\nplt.figure();\n```\n:::\n\n\n![](4.svg)\n\n## Resources\n\nResources I found useful as an R user learning Python:\n\n[Effectively using Matplotlib](https://pbpython.com/effective-matplotlib.html) - great for outlining a set of principles and steps for plotting\n\n[Pandas comparison with R](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html) - Method chaining preserves the main functionality of the tidyverse %>% pipe, just need to look up the corresponding functions\n\n[Pandas plotting](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html) - useful summary of pandas plotting tools\n\n",
    "supporting": [
      "2020-04-06_Learning_matplotlib_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}